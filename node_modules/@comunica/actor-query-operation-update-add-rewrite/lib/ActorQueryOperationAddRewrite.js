"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorQueryOperationAddRewrite = void 0;
const bus_query_operation_1 = require("@comunica/bus-query-operation");
const rdf_data_factory_1 = require("rdf-data-factory");
const sparqlalgebrajs_1 = require("sparqlalgebrajs");
const DF = new rdf_data_factory_1.DataFactory();
/**
 * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor
 * that handles SPARQL add operations.
 */
class ActorQueryOperationAddRewrite extends bus_query_operation_1.ActorQueryOperationTypedMediated {
    constructor(args) {
        super(args, 'add');
        this.factory = new sparqlalgebrajs_1.Factory();
    }
    async testOperation(operation, context) {
        bus_query_operation_1.ActorQueryOperation.throwOnReadOnly(context);
        return true;
    }
    runOperation(operationOriginal, context) {
        // CONSTRUCT all quads from the source, and INSERT them into the destination
        const destination = operationOriginal.destination === 'DEFAULT' ? DF.defaultGraph() : operationOriginal.destination;
        const source = operationOriginal.source === 'DEFAULT' ? DF.defaultGraph() : operationOriginal.source;
        const operation = this.factory.createDeleteInsert(undefined, [
            this.factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o'), destination),
        ], this.factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o'), source));
        return this.mediatorQueryOperation.mediate({ operation, context });
    }
}
exports.ActorQueryOperationAddRewrite = ActorQueryOperationAddRewrite;
//# sourceMappingURL=ActorQueryOperationAddRewrite.js.map
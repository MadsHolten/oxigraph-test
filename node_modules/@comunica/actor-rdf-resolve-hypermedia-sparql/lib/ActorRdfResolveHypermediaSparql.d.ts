import type { MediatorHttp } from '@comunica/bus-http';
import type { IActionRdfResolveHypermedia, IActorRdfResolveHypermediaOutput, IActorRdfResolveHypermediaTest, IActorRdfResolveHypermediaArgs } from '@comunica/bus-rdf-resolve-hypermedia';
import { ActorRdfResolveHypermedia } from '@comunica/bus-rdf-resolve-hypermedia';
/**
 * A comunica SPARQL RDF Resolve Hypermedia Actor.
 */
export declare class ActorRdfResolveHypermediaSparql extends ActorRdfResolveHypermedia {
    readonly mediatorHttp: MediatorHttp;
    readonly checkUrlSuffix: boolean;
    readonly forceHttpGet: boolean;
    constructor(args: IActorRdfResolveHypermediaSparqlArgs);
    testMetadata(action: IActionRdfResolveHypermedia): Promise<IActorRdfResolveHypermediaTest>;
    run(action: IActionRdfResolveHypermedia): Promise<IActorRdfResolveHypermediaOutput>;
}
export interface IActorRdfResolveHypermediaSparqlArgs extends IActorRdfResolveHypermediaArgs {
    /**
     * The HTTP mediator
     */
    mediatorHttp: MediatorHttp;
    /**
     * If URLs ending with '/sparql' should also be considered SPARQL endpoints.
     * @default {true}
     */
    checkUrlSuffix: boolean;
    /**
     * If queries should be sent via HTTP GET instead of POST
     * @default {false}
     */
    forceHttpGet: boolean;
}

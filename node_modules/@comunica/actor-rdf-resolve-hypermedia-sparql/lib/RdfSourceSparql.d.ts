import type { MediatorHttp } from '@comunica/bus-http';
import type { IQuadSource } from '@comunica/bus-rdf-resolve-quad-pattern';
import type { BindingsStream, IActionContext } from '@comunica/types';
import type * as RDF from '@rdfjs/types';
import type { AsyncIterator } from 'asynciterator';
import type { Algebra } from 'sparqlalgebrajs';
import { Factory } from 'sparqlalgebrajs';
export declare class RdfSourceSparql implements IQuadSource {
    protected static readonly FACTORY: Factory;
    private readonly url;
    private readonly context;
    private readonly mediatorHttp;
    private readonly endpointFetcher;
    constructor(url: string, context: IActionContext, mediatorHttp: MediatorHttp, forceHttpGet: boolean);
    /**
     * Replace all blank nodes in a pattern with variables.
     * If the pattern contains no blank nodes the original pattern gets returned.
     * @param {RDF.BaseQuad} pattern A quad pattern.
     * @return {RDF.BaseQuad} A quad pattern with no blank nodes.
     */
    static replaceBlankNodes(pattern: RDF.BaseQuad): RDF.BaseQuad;
    /**
     * Convert a quad pattern to a BGP with only that pattern.
     * @param {RDF.pattern} quad A quad pattern.
     * @return {Bgp} A BGP.
     */
    static patternToBgp(pattern: RDF.BaseQuad): Algebra.Bgp;
    /**
     * Convert a quad pattern to a select query for this pattern.
     * @param {RDF.Quad} pattern A quad pattern.
     * @return {string} A select query string.
     */
    static patternToSelectQuery(pattern: RDF.BaseQuad): string;
    /**
     * Convert a quad pattern to a count query for the number of matching triples for this pattern.
     * @param {RDF.Quad} pattern A quad pattern.
     * @return {string} A count query string.
     */
    static patternToCountQuery(pattern: RDF.BaseQuad): string;
    /**
     * Send a SPARQL query to a SPARQL endpoint and retrieve its bindings as a stream.
     * @param {string} endpoint A SPARQL endpoint URL.
     * @param {string} query A SPARQL query string.
     * @return {BindingsStream} A stream of bindings.
     */
    queryBindings(endpoint: string, query: string): BindingsStream;
    match(subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term): AsyncIterator<RDF.Quad>;
}

import type { IActionAbstractMediaTyped, IActionAbstractMediaTypedHandle, IActionAbstractMediaTypedMediaTypes, IActorArgsMediaTyped, IActorOutputAbstractMediaTyped, IActorOutputAbstractMediaTypedHandle, IActorOutputAbstractMediaTypedMediaTypes, IActorTestAbstractMediaTyped, IActorTestAbstractMediaTypedHandle, IActorTestAbstractMediaTypedMediaTypes, IActionAbstractMediaTypedMediaTypeFormats, IActorOutputAbstractMediaTypedMediaTypeFormats, IActorTestAbstractMediaTypedMediaTypeFormats } from '@comunica/actor-abstract-mediatyped';
import { ActorAbstractMediaTyped } from '@comunica/actor-abstract-mediatyped';
import type { IActionParse, IActorParseOutput } from '@comunica/actor-abstract-parse';
import type { IActorTest, Mediate } from '@comunica/core';
import type * as RDF from '@rdfjs/types';
/**
 * A base actor for listening to RDF parse events.
 *
 * Actor types:
 * * Input:  IActionRdfParseOrMediaType:      A parse input or a media type input.
 * * Test:   <none>
 * * Output: IActorOutputRdfParseOrMediaType: The parsed quads.
 *
 * @see IActionInit
 */
export declare abstract class ActorRdfParse extends ActorAbstractMediaTyped<IActionRdfParse, IActorTest, IActorRdfParseOutput> {
    /**
     * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
     */
    constructor(args: IActorRdfParseArgs);
}
export declare type IActionRootRdfParse = IActionAbstractMediaTyped<IActionRdfParse>;
export declare type IActorTestRootRdfParse = IActorTestAbstractMediaTyped<IActorTest>;
export declare type IActorOutputRootRdfParse = IActorOutputAbstractMediaTyped<IActorRdfParseOutput>;
export declare type IActionRdfParseHandle = IActionAbstractMediaTypedHandle<IActionRdfParse>;
export declare type IActorTestRdfParseHandle = IActorTestAbstractMediaTypedHandle<IActorTest>;
export declare type IActorOutputRdfParseHandle = IActorOutputAbstractMediaTypedHandle<IActorRdfParseOutput>;
export declare type IActionRdfParseMediaTypes = IActionAbstractMediaTypedMediaTypes;
export declare type IActorTestRdfParseMediaTypes = IActorTestAbstractMediaTypedMediaTypes;
export declare type IActorOutputRdfParseMediaTypes = IActorOutputAbstractMediaTypedMediaTypes;
export declare type IActionRdfParseMediaTypeFormats = IActionAbstractMediaTypedMediaTypeFormats;
export declare type IActorTestRdfParseMediaTypeFormats = IActorTestAbstractMediaTypedMediaTypeFormats;
export declare type IActorOutputRdfParseMediaTypeFormats = IActorOutputAbstractMediaTypedMediaTypeFormats;
export interface IActionRdfParseMetadata {
    /**
     * The base IRI for parsed quads.
     */
    baseIRI?: string;
}
/**
 * The RDF parse input, which contains the input stream in the given media type.
 * One of the fields MUST be truthy.
 */
export declare type IActionRdfParse = IActionParse<IActionRdfParseMetadata>;
export interface IActorRdfParseOutputMetadata {
    /**
     * An optional field indicating if the given quad stream originates from a triple-based serialization,
     * in which everything is serialized in the default graph.
     * If falsy, the quad stream contain actual quads, otherwise they should be interpreted as triples.
     */
    triples?: boolean;
}
export declare type IActorRdfParseOutput = IActorParseOutput<RDF.Stream, IActorRdfParseOutputMetadata>;
export declare type IActorRdfParseArgs = IActorArgsMediaTyped<IActionRdfParse, IActorTest, IActorRdfParseOutput>;
export declare type MediatorRdfParseHandle = Mediate<IActionRdfParseHandle, IActorOutputRdfParseHandle, IActorTestRdfParseHandle>;
export declare type MediatorRdfParseMediaTypes = Mediate<IActionRdfParseMediaTypes, IActorOutputRdfParseMediaTypes, IActorTestRdfParseMediaTypes>;
export declare type MediatorRdfParseMediaTypeFormats = Mediate<IActionRdfParseMediaTypeFormats, IActorOutputRdfParseMediaTypeFormats, IActorTestRdfParseMediaTypeFormats>;

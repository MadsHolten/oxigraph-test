"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorQueryResultSerializeTable = void 0;
const bus_query_result_serialize_1 = require("@comunica/bus-query-result-serialize");
const rdf_data_factory_1 = require("rdf-data-factory");
const rdf_terms_1 = require("rdf-terms");
const readable_stream_1 = require("readable-stream");
const DF = new rdf_data_factory_1.DataFactory();
const QUAD_TERM_NAMES_VARS = rdf_terms_1.QUAD_TERM_NAMES.map(name => DF.variable(name));
/**
 * A comunica Table Sparql Serialize Actor.
 */
class ActorQueryResultSerializeTable extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
    /**
     * @param args -
     *   \ @defaultNested {{ "table": 0.6 }} mediaTypePriorities
     *   \ @defaultNested {{ "table": "https://comunica.linkeddatafragments.org/#results_table" }} mediaTypeFormats
     */
    constructor(args) {
        super(args);
        this.padding = ActorQueryResultSerializeTable.repeat(' ', this.columnWidth);
    }
    static repeat(str, count) {
        return new Array(count + 1).join(str);
    }
    async testHandleChecked(action, context) {
        if (!['bindings', 'quads'].includes(action.type)) {
            throw new Error('This actor can only handle bindings or quad streams.');
        }
        return true;
    }
    pad(str) {
        if (str.length <= this.columnWidth) {
            return str + this.padding.slice(str.length);
        }
        return `${str.slice(0, this.columnWidth - 1)}â€¦`;
    }
    pushHeader(data, labels) {
        const header = labels.map(label => this.pad(label.value)).join(' ');
        data.push(`${header}\n${ActorQueryResultSerializeTable.repeat('-', header.length)}\n`);
    }
    pushRow(data, labels, bindings) {
        data.push(`${labels
            .map(label => bindings.get(label)?.value || '')
            .map(label => this.pad(label))
            .join(' ')}\n`);
    }
    async runHandle(action, mediaType, context) {
        const data = new readable_stream_1.Readable();
        data._read = () => {
            // Do nothing
        };
        let resultStream;
        if (action.type === 'bindings') {
            resultStream = action.bindingsStream;
            const labels = (await action.metadata()).variables;
            this.pushHeader(data, labels);
            resultStream.on('error', error => data.emit('error', error));
            resultStream.on('data', bindings => this.pushRow(data, labels, bindings));
        }
        else {
            resultStream = action.quadStream;
            this.pushHeader(data, QUAD_TERM_NAMES_VARS);
            resultStream.on('error', error => data.emit('error', error));
            resultStream.on('data', quad => data.push(`${(0, rdf_terms_1.getTerms)(quad).map(term => this.pad(term.value)).join(' ')}\n`));
        }
        resultStream.on('end', () => data.push(null));
        return { data };
    }
}
exports.ActorQueryResultSerializeTable = ActorQueryResultSerializeTable;
//# sourceMappingURL=ActorQueryResultSerializeTable.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorRdfUpdateQuadsDestination = exports.deskolemize = exports.deskolemizeStream = void 0;
const actor_rdf_resolve_quad_pattern_federated_1 = require("@comunica/actor-rdf-resolve-quad-pattern-federated");
const context_entries_1 = require("@comunica/context-entries");
const ActorRdfUpdateQuads_1 = require("./ActorRdfUpdateQuads");
function deskolemizeStream(stream, id) {
    return stream?.map(quad => actor_rdf_resolve_quad_pattern_federated_1.FederatedQuadSource.deskolemizeQuad(quad, id));
}
exports.deskolemizeStream = deskolemizeStream;
function deskolemize(action) {
    const destination = action.context.get(context_entries_1.KeysRdfUpdateQuads.destination);
    const id = action.context.get(context_entries_1.KeysRdfResolveQuadPattern.sourceIds)?.get(destination);
    if (!id) {
        return action;
    }
    return {
        ...action,
        quadStreamInsert: deskolemizeStream(action.quadStreamInsert, id),
        quadStreamDelete: deskolemizeStream(action.quadStreamDelete, id),
    };
}
exports.deskolemize = deskolemize;
/**
 * A base implementation for rdf-update-quads events
 * that wraps around an {@link IQuadDestination}.
 *
 * @see IQuadDestination
 */
class ActorRdfUpdateQuadsDestination extends ActorRdfUpdateQuads_1.ActorRdfUpdateQuads {
    async test(action) {
        return true;
    }
    async run(action) {
        const destination = await this.getDestination(action.context);
        return await this.getOutput(destination, deskolemize(action), action.context);
    }
    /**
     * Get the output of the given action on a destination.
     * @param {IQuadDestination} destination A quad destination, possibly lazy.
     * @param {IActionRdfUpdateQuads} action The action.
     * @param {ActionContext} context Optional context data.
     */
    async getOutput(destination, action, context) {
        const execute = () => Promise.all([
            action.quadStreamInsert ? destination.insert(action.quadStreamInsert) : Promise.resolve(),
            action.quadStreamDelete ? destination.delete(action.quadStreamDelete) : Promise.resolve(),
            action.deleteGraphs ?
                destination.deleteGraphs(action.deleteGraphs.graphs, action.deleteGraphs.requireExistence, action.deleteGraphs.dropGraphs) :
                Promise.resolve(),
            action.createGraphs ?
                destination.createGraphs(action.createGraphs.graphs, action.createGraphs.requireNonExistence) :
                Promise.resolve(),
        ]).then(() => {
            // Return void
        });
        return { execute };
    }
}
exports.ActorRdfUpdateQuadsDestination = ActorRdfUpdateQuadsDestination;
//# sourceMappingURL=ActorRdfUpdateQuadsDestination.js.map
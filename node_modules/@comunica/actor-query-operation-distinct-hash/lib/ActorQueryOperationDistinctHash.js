"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorQueryOperationDistinctHash = void 0;
const bus_query_operation_1 = require("@comunica/bus-query-operation");
/**
 * A comunica Distinct Hash Query Operation Actor.
 */
class ActorQueryOperationDistinctHash extends bus_query_operation_1.ActorQueryOperationTypedMediated {
    constructor(args) {
        super(args, 'distinct');
    }
    async testOperation(operation, context) {
        return true;
    }
    async runOperation(operation, context) {
        const output = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({ operation: operation.input, context }));
        const bindingsStream = output.bindingsStream.filter(await this.newHashFilter(context));
        return {
            type: 'bindings',
            bindingsStream,
            metadata: output.metadata,
        };
    }
    /**
     * Create a new distinct filter function.
     * This will maintain an internal hash datastructure so that every bindings object only returns true once.
     * @param context The action context.
     * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.
     */
    async newHashFilter(context) {
        const { hashFunction } = await this.mediatorHashBindings.mediate({ allowHashCollisions: true, context });
        const hashes = {};
        return (bindings) => {
            const hash = hashFunction(bindings);
            // eslint-disable-next-line no-return-assign
            return !(hash in hashes) && (hashes[hash] = true);
        };
    }
}
exports.ActorQueryOperationDistinctHash = ActorQueryOperationDistinctHash;
//# sourceMappingURL=ActorQueryOperationDistinctHash.js.map
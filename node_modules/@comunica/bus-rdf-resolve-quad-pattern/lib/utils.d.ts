import type { IActionContext, DataSources, IDataSource } from '@comunica/types';
import type * as RDF from '@rdfjs/types';
/**
 * Check if the given data source is a string or RDF store.
 * @param dataSource A data source.
 */
export declare function isDataSourceRawType(dataSource: IDataSource): dataSource is string | RDF.Source;
/**
 * Get the data source type.
 * @param dataSource A data source.
 */
export declare function getDataSourceType(dataSource: IDataSource): string | undefined;
/**
 * Get the data source value.
 * @param dataSource A data source.
 */
export declare function getDataSourceValue(dataSource: IDataSource): string | RDF.Source;
/**
 * Get the data source from the given context.
 * @param {ActionContext} context An optional context.
 * @param {IDataSource} dataSource The source or undefined.
 */
export declare function getDataSourceContext(dataSource: IDataSource, context: IActionContext): IActionContext;
/**
 * Get the sources from the given context.
 * @param {ActionContext} context An optional context.
 * @return {IDataSource[]} The array of sources or undefined.
 */
export declare function getContextSources(context: IActionContext): DataSources | undefined;
/**
 * Get the source from the given context.
 * @param {ActionContext} context An optional context.
 * @return {IDataSource} The source or undefined.
 */
export declare function getContextSource(context: IActionContext): IDataSource | undefined;
/**
 * Get the single source if the context contains just a single source.
 * This will check both the source and sources context entries.
 * @param {IActionContext} context A context, can be null.
 * @return {IDataSource} The single datasource or undefined.
 */
export declare function getContextSourceFirst(context: IActionContext): IDataSource | undefined;
/**
 * Get the source's raw URL value from the given context.
 * @param {IDataSource} source A source.
 * @return {string} The URL or null.
 */
export declare function getContextSourceUrl(source?: IDataSource): string | undefined;
/**
 * Check if the given context has a single source.
 * @param {ActionContext} context An optional context.
 * @return {boolean} If the given context has a single source of the given type.
 */
export declare function hasContextSingleSource(context: IActionContext): boolean;
/**
 * Check if the given context has a single source of the given type.
 * @param {string} requiredType The required source type name.
 * @param {ActionContext} context An optional context.
 * @return {boolean} If the given context has a single source of the given type.
 */
export declare function hasContextSingleSourceOfType(requiredType: string, context: IActionContext): boolean;

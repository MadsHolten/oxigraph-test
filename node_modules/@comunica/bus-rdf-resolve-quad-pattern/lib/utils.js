"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasContextSingleSourceOfType = exports.hasContextSingleSource = exports.getContextSourceUrl = exports.getContextSourceFirst = exports.getContextSource = exports.getContextSources = exports.getDataSourceContext = exports.getDataSourceValue = exports.getDataSourceType = exports.isDataSourceRawType = void 0;
const context_entries_1 = require("@comunica/context-entries");
/**
 * Check if the given data source is a string or RDF store.
 * @param dataSource A data source.
 */
function isDataSourceRawType(dataSource) {
    return typeof dataSource === 'string' || 'match' in dataSource;
}
exports.isDataSourceRawType = isDataSourceRawType;
/**
 * Get the data source type.
 * @param dataSource A data source.
 */
function getDataSourceType(dataSource) {
    if (typeof dataSource === 'string') {
        return '';
    }
    return 'match' in dataSource ? 'rdfjsSource' : dataSource.type;
}
exports.getDataSourceType = getDataSourceType;
/**
 * Get the data source value.
 * @param dataSource A data source.
 */
function getDataSourceValue(dataSource) {
    return isDataSourceRawType(dataSource) ? dataSource : dataSource.value;
}
exports.getDataSourceValue = getDataSourceValue;
/**
 * Get the data source from the given context.
 * @param {ActionContext} context An optional context.
 * @param {IDataSource} dataSource The source or undefined.
 */
function getDataSourceContext(dataSource, context) {
    if (typeof dataSource === 'string' || 'match' in dataSource || !dataSource.context) {
        return context;
    }
    return context.merge(dataSource.context);
}
exports.getDataSourceContext = getDataSourceContext;
/**
 * Get the sources from the given context.
 * @param {ActionContext} context An optional context.
 * @return {IDataSource[]} The array of sources or undefined.
 */
function getContextSources(context) {
    return context.get(context_entries_1.KeysRdfResolveQuadPattern.sources);
}
exports.getContextSources = getContextSources;
/**
 * Get the source from the given context.
 * @param {ActionContext} context An optional context.
 * @return {IDataSource} The source or undefined.
 */
function getContextSource(context) {
    return context.get(context_entries_1.KeysRdfResolveQuadPattern.source);
}
exports.getContextSource = getContextSource;
/**
 * Get the single source if the context contains just a single source.
 * This will check both the source and sources context entries.
 * @param {IActionContext} context A context, can be null.
 * @return {IDataSource} The single datasource or undefined.
 */
function getContextSourceFirst(context) {
    if (context.has(context_entries_1.KeysRdfResolveQuadPattern.source)) {
        // If the single source is set
        return context.get(context_entries_1.KeysRdfResolveQuadPattern.source);
    }
    // If multiple sources are set
    const datasources = context.get(context_entries_1.KeysRdfResolveQuadPattern.sources);
    if (datasources?.length === 1) {
        return datasources[0];
    }
}
exports.getContextSourceFirst = getContextSourceFirst;
/**
 * Get the source's raw URL value from the given context.
 * @param {IDataSource} source A source.
 * @return {string} The URL or null.
 */
function getContextSourceUrl(source) {
    if (source) {
        let fileUrl = getDataSourceValue(source);
        if (typeof fileUrl === 'string') {
            // Remove hashes from source
            const hashPosition = fileUrl.indexOf('#');
            if (hashPosition >= 0) {
                fileUrl = fileUrl.slice(0, hashPosition);
            }
            return fileUrl;
        }
    }
}
exports.getContextSourceUrl = getContextSourceUrl;
/**
 * Check if the given context has a single source.
 * @param {ActionContext} context An optional context.
 * @return {boolean} If the given context has a single source of the given type.
 */
function hasContextSingleSource(context) {
    const source = getContextSource(context);
    return Boolean(source && (isDataSourceRawType(source) || source.value));
}
exports.hasContextSingleSource = hasContextSingleSource;
/**
 * Check if the given context has a single source of the given type.
 * @param {string} requiredType The required source type name.
 * @param {ActionContext} context An optional context.
 * @return {boolean} If the given context has a single source of the given type.
 */
function hasContextSingleSourceOfType(requiredType, context) {
    const source = getContextSource(context);
    return Boolean(source && getDataSourceType(source) === requiredType && getDataSourceValue(source));
}
exports.hasContextSingleSourceOfType = hasContextSingleSourceOfType;
//# sourceMappingURL=utils.js.map
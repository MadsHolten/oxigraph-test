"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorQueryResultSerializeSimple = void 0;
const bus_query_result_serialize_1 = require("@comunica/bus-query-result-serialize");
const readable_stream_1 = require("readable-stream");
/**
 * A comunica Simple Sparql Serialize Actor.
 */
class ActorQueryResultSerializeSimple extends bus_query_result_serialize_1.ActorQueryResultSerializeFixedMediaTypes {
    /**
     * @param args -
     *   \ @defaultNested {{ "simple": 0.9 }} mediaTypePriorities
     *   \ @defaultNested {{ "simple": "https://comunica.linkeddatafragments.org/#results_simple" }} mediaTypeFormats
     */
    constructor(args) {
        super(args);
    }
    async testHandleChecked(action, context) {
        if (!['bindings', 'quads', 'boolean', 'void'].includes(action.type)) {
            throw new Error('This actor can only handle bindings streams, quad streams, booleans, or updates.');
        }
        return true;
    }
    async runHandle(action, mediaType, context) {
        const data = new readable_stream_1.Readable();
        data._read = () => {
            // Do nothing
        };
        let resultStream;
        if (action.type === 'bindings') {
            resultStream = action.bindingsStream;
            resultStream.on('error', error => data.emit('error', error));
            resultStream.on('data', (bindings) => data.push(`${[...bindings].map(([key, value]) => `?${key.value}: ${value.value}`).join('\n')}\n\n`));
            resultStream.on('end', () => data.push(null));
        }
        else if (action.type === 'quads') {
            resultStream = action.quadStream;
            resultStream.on('error', error => data.emit('error', error));
            resultStream.on('data', quad => data.push(`subject: ${quad.subject.value}\n` +
                `predicate: ${quad.predicate.value}\n` +
                `object: ${quad.object.value}\n` +
                `graph: ${quad.graph.value}\n\n`));
            resultStream.on('end', () => data.push(null));
        }
        else if (action.type === 'boolean') {
            try {
                data.push(`${JSON.stringify(await action.execute())}\n`);
                data.push(null);
            }
            catch (error) {
                setTimeout(() => data.emit('error', error));
            }
        }
        else {
            action.execute()
                .then(() => {
                data.push('ok\n');
                data.push(null);
            })
                .catch(error => setTimeout(() => data.emit('error', error)));
        }
        return { data };
    }
}
exports.ActorQueryResultSerializeSimple = ActorQueryResultSerializeSimple;
//# sourceMappingURL=ActorQueryResultSerializeSimple.js.map
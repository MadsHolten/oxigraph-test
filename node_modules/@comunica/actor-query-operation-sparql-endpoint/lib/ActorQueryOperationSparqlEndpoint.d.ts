import type { MediatorHttp } from '@comunica/bus-http';
import type { IActionQueryOperation } from '@comunica/bus-query-operation';
import { ActorQueryOperation } from '@comunica/bus-query-operation';
import type { IActorArgs, IActorTest } from '@comunica/core';
import type { IMediatorTypeHttpRequests } from '@comunica/mediatortype-httprequests';
import type { IQueryOperationResult, IActionContext } from '@comunica/types';
import type * as RDF from '@rdfjs/types';
import { SparqlEndpointFetcher } from 'fetch-sparql-endpoint';
import { Factory } from 'sparqlalgebrajs';
/**
 * A comunica SPARQL Endpoint Query Operation Actor.
 */
export declare class ActorQueryOperationSparqlEndpoint extends ActorQueryOperation {
    protected static readonly FACTORY: Factory;
    readonly mediatorHttp: MediatorHttp;
    readonly checkUrlSuffixSparql: boolean;
    readonly checkUrlSuffixUpdate: boolean;
    readonly endpointFetcher: SparqlEndpointFetcher;
    protected lastContext: IActionContext;
    constructor(args: IActorQueryOperationSparqlEndpointArgs);
    test(action: IActionQueryOperation): Promise<IMediatorTypeHttpRequests>;
    run(action: IActionQueryOperation): Promise<IQueryOperationResult>;
    /**
     * Execute the given SELECT or CONSTRUCT query against the given endpoint.
     * @param endpoint A SPARQL endpoint URL.
     * @param query A SELECT or CONSTRUCT query.
     * @param quads If the query returns quads, i.e., if it is a CONSTRUCT query.
     * @param variables Variables for SELECT queries.
     */
    executeQuery(endpoint: string, query: string, quads: boolean, variables?: RDF.Variable[]): IQueryOperationResult;
}
export interface IActorQueryOperationSparqlEndpointArgs extends IActorArgs<IActionQueryOperation, IActorTest, IQueryOperationResult> {
    /**
     * The HTTP mediator
     */
    mediatorHttp: MediatorHttp;
    /**
     * If URLs ending with '/sparql' should also be considered SPARQL endpoints.
     * @default {true}
     */
    checkUrlSuffixSparql: boolean;
    /**
     * If URLs ending with '/update' should also be considered SPARQL endpoints.
     * @default {true}
     */
    checkUrlSuffixUpdate: boolean;
    /**
     * If queries should be sent via HTTP GET instead of POST.
     * @default {false}
     */
    forceHttpGet: boolean;
}

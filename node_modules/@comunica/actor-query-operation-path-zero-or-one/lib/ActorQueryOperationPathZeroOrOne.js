"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorQueryOperationPathZeroOrOne = void 0;
const actor_abstract_path_1 = require("@comunica/actor-abstract-path");
const bindings_factory_1 = require("@comunica/bindings-factory");
const bus_query_operation_1 = require("@comunica/bus-query-operation");
const asynciterator_1 = require("asynciterator");
const sparqlalgebrajs_1 = require("sparqlalgebrajs");
const BF = new bindings_factory_1.BindingsFactory();
/**
 * A comunica Path ZeroOrOne Query Operation Actor.
 */
class ActorQueryOperationPathZeroOrOne extends actor_abstract_path_1.ActorAbstractPath {
    constructor(args) {
        super(args, sparqlalgebrajs_1.Algebra.types.ZERO_OR_ONE_PATH);
    }
    async runOperation(operation, context) {
        const predicate = operation.predicate;
        const sVar = operation.subject.termType === 'Variable';
        const oVar = operation.object.termType === 'Variable';
        const extra = [];
        // Both subject and object non-variables
        if (!sVar && !oVar && operation.subject.equals(operation.object)) {
            return {
                type: 'bindings',
                bindingsStream: new asynciterator_1.SingletonIterator(BF.bindings()),
                metadata: () => Promise.resolve({
                    cardinality: { type: 'exact', value: 1 },
                    canContainUndefs: false,
                    variables: [],
                }),
            };
        }
        if (sVar && oVar) {
            throw new Error('ZeroOrOne path expressions with 2 variables not supported yet');
        }
        const distinct = await this.isPathArbitraryLengthDistinct(context, operation);
        if (distinct.operation) {
            return distinct.operation;
        }
        context = distinct.context;
        if (operation.subject.termType === 'Variable') {
            extra.push(BF.bindings([[operation.subject, operation.object]]));
        }
        if (operation.object.termType === 'Variable') {
            extra.push(BF.bindings([[operation.object, operation.subject]]));
        }
        const single = bus_query_operation_1.ActorQueryOperation.getSafeBindings(await this.mediatorQueryOperation.mediate({
            context,
            operation: actor_abstract_path_1.ActorAbstractPath.FACTORY
                .createPath(operation.subject, predicate.path, operation.object, operation.graph),
        }));
        const bindingsStream = single.bindingsStream.prepend(extra);
        return {
            type: 'bindings',
            bindingsStream,
            metadata: single.metadata,
        };
    }
}
exports.ActorQueryOperationPathZeroOrOne = ActorQueryOperationPathZeroOrOne;
//# sourceMappingURL=ActorQueryOperationPathZeroOrOne.js.map
/// <reference types="node" />
import type { IActionAbstractMediaTyped, IActionAbstractMediaTypedHandle, IActionAbstractMediaTypedMediaTypeFormats, IActionAbstractMediaTypedMediaTypes, IActorArgsMediaTyped, IActorOutputAbstractMediaTyped, IActorOutputAbstractMediaTypedHandle, IActorOutputAbstractMediaTypedMediaTypeFormats, IActorOutputAbstractMediaTypedMediaTypes, IActorTestAbstractMediaTyped, IActorTestAbstractMediaTypedHandle, IActorTestAbstractMediaTypedMediaTypeFormats, IActorTestAbstractMediaTypedMediaTypes } from '@comunica/actor-abstract-mediatyped';
import { ActorAbstractMediaTyped } from '@comunica/actor-abstract-mediatyped';
import type { IAction, IActorOutput, IActorTest, Mediate } from '@comunica/core';
import type { IQueryOperationResultBase, IActionContext } from '@comunica/types';
/**
 * A comunica actor for query-result-serialize events.
 *
 * Actor types:
 * * Input:  IActionSparqlSerialize:      SPARQL bindings or a quad stream.
 * * Test:   <none>
 * * Output: IActorQueryResultSerializeOutput: A text stream.
 *
 * @see IActionSparqlSerialize
 * @see IActorQueryResultSerializeOutput
 */
export declare abstract class ActorQueryResultSerialize extends ActorAbstractMediaTyped<IActionSparqlSerialize, IActorTest, IActorQueryResultSerializeOutput> {
    /**
     * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus
     */
    constructor(args: IActorQueryResultSerializeArgs);
}
export declare type IActionRootQueryResultSerialize = IActionAbstractMediaTyped<IActionSparqlSerialize>;
export declare type IActorTestRootQueryResultSerialize = IActorTestAbstractMediaTyped<IActorTest>;
export declare type IActorOutputRootQueryResultSerialize = IActorOutputAbstractMediaTyped<IActorQueryResultSerializeOutput>;
export declare type IActionQueryResultSerializeHandle = IActionAbstractMediaTypedHandle<IActionSparqlSerialize>;
export declare type IActorTestQueryResultSerializeHandle = IActorTestAbstractMediaTypedHandle<IActorTest>;
export declare type IActorOutputQueryResultSerializeHandle = IActorOutputAbstractMediaTypedHandle<IActorQueryResultSerializeOutput>;
export declare type IActionQueryResultSerializeMediaTypes = IActionAbstractMediaTypedMediaTypes;
export declare type IActorTestQueryResultSerializeMediaTypes = IActorTestAbstractMediaTypedMediaTypes;
export declare type IActorOutputQueryResultSerializeMediaTypes = IActorOutputAbstractMediaTypedMediaTypes;
export declare type IActionQueryResultSerializeMediaTypeFormats = IActionAbstractMediaTypedMediaTypeFormats;
export declare type IActorTestQueryResultSerializeMediaTypeFormats = IActorTestAbstractMediaTypedMediaTypeFormats;
export declare type IActorOutputQueryResultSerializeMediaTypeFormats = IActorOutputAbstractMediaTypedMediaTypeFormats;
export interface IActionSparqlSerialize extends IAction, IQueryOperationResultBase {
    context: IActionContext;
}
export interface IActorQueryResultSerializeOutput extends IActorOutput {
    /**
     * A readable string stream in a certain SPARQL serialization that was serialized.
     */
    data: NodeJS.ReadableStream;
}
export declare type IActorQueryResultSerializeArgs = IActorArgsMediaTyped<IActionSparqlSerialize, IActorTest, IActorQueryResultSerializeOutput>;
export declare type MediatorQueryResultSerializeHandle = Mediate<IActionQueryResultSerializeHandle, IActorOutputQueryResultSerializeHandle, IActorTestQueryResultSerializeHandle>;
export declare type MediatorQueryResultSerializeMediaTypes = Mediate<IActionQueryResultSerializeMediaTypes, IActorOutputQueryResultSerializeMediaTypes, IActorTestQueryResultSerializeMediaTypes>;
export declare type MediatorQueryResultSerializeMediaTypeFormats = Mediate<IActionQueryResultSerializeMediaTypeFormats, IActorOutputQueryResultSerializeMediaTypeFormats, IActorTestQueryResultSerializeMediaTypeFormats>;

import type { MediatorDereferenceRdf } from '@comunica/bus-dereference-rdf';
import type { ActorHttpInvalidateListenable } from '@comunica/bus-http-invalidate';
import type { MediatorRdfMetadata } from '@comunica/bus-rdf-metadata';
import type { MediatorRdfMetadataExtract } from '@comunica/bus-rdf-metadata-extract';
import type { MediatorRdfResolveHypermedia } from '@comunica/bus-rdf-resolve-hypermedia';
import type { MediatorRdfResolveHypermediaLinks } from '@comunica/bus-rdf-resolve-hypermedia-links';
import type { MediatorRdfResolveHypermediaLinksQueue } from '@comunica/bus-rdf-resolve-hypermedia-links-queue';
import type { IActionRdfResolveQuadPattern, IQuadSource, IActorRdfResolveQuadPatternArgs } from '@comunica/bus-rdf-resolve-quad-pattern';
import { ActorRdfResolveQuadPatternSource } from '@comunica/bus-rdf-resolve-quad-pattern';
import type { IActorTest } from '@comunica/core';
import type { IActionContext } from '@comunica/types';
import LRUCache = require('lru-cache');
import type { Algebra } from 'sparqlalgebrajs';
import { MediatedQuadSource } from './MediatedQuadSource';
/**
 * A comunica Hypermedia RDF Resolve Quad Pattern Actor.
 */
export declare class ActorRdfResolveQuadPatternHypermedia extends ActorRdfResolveQuadPatternSource implements IActorRdfResolveQuadPatternHypermediaArgs {
    readonly mediatorDereferenceRdf: MediatorDereferenceRdf;
    readonly mediatorMetadata: MediatorRdfMetadata;
    readonly mediatorMetadataExtract: MediatorRdfMetadataExtract;
    readonly mediatorRdfResolveHypermedia: MediatorRdfResolveHypermedia;
    readonly mediatorRdfResolveHypermediaLinks: MediatorRdfResolveHypermediaLinks;
    readonly mediatorRdfResolveHypermediaLinksQueue: MediatorRdfResolveHypermediaLinksQueue;
    readonly cacheSize: number;
    readonly cache?: LRUCache<string, MediatedQuadSource>;
    readonly httpInvalidator: ActorHttpInvalidateListenable;
    readonly maxIterators: number;
    constructor(args: IActorRdfResolveQuadPatternHypermediaArgs);
    test(action: IActionRdfResolveQuadPattern): Promise<IActorTest>;
    protected getSource(context: IActionContext, operation: Algebra.Pattern): Promise<IQuadSource>;
}
export interface IActorRdfResolveQuadPatternHypermediaArgs extends IActorRdfResolveQuadPatternArgs {
    /**
     * The maximum number of entries in the LRU cache, set to 0 to disable.
     * @range {integer}
     * @default {100}
     */
    cacheSize: number;
    /**
     * An actor that listens to HTTP invalidation events
     * @default {<default_invalidator> a <npmd:@comunica/bus-http-invalidate/^2.0.0/components/ActorHttpInvalidateListenable.jsonld#ActorHttpInvalidateListenable>}
     */
    httpInvalidator: ActorHttpInvalidateListenable;
    /**
     * The maximum number of links that can be followed in parallel.
     * @default {64}
     */
    maxIterators: number;
    /**
     * The RDF dereference mediator
     */
    mediatorDereferenceRdf: MediatorDereferenceRdf;
    /**
     * The metadata mediator
     */
    mediatorMetadata: MediatorRdfMetadata;
    /**
     * The metadata extract mediator
     */
    mediatorMetadataExtract: MediatorRdfMetadataExtract;
    /**
     * The hypermedia resolve mediator
     */
    mediatorRdfResolveHypermedia: MediatorRdfResolveHypermedia;
    /**
     * The hypermedia links resolve mediator
     */
    mediatorRdfResolveHypermediaLinks: MediatorRdfResolveHypermediaLinks;
    /**
     * The hypermedia links queue resolve mediator
     */
    mediatorRdfResolveHypermediaLinksQueue: MediatorRdfResolveHypermediaLinksQueue;
}

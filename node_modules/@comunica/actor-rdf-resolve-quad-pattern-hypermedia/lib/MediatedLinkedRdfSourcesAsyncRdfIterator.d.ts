import type { MediatorDereferenceRdf } from '@comunica/bus-dereference-rdf';
import type { MediatorRdfMetadata } from '@comunica/bus-rdf-metadata';
import type { MediatorRdfMetadataExtract } from '@comunica/bus-rdf-metadata-extract';
import type { MediatorRdfResolveHypermedia } from '@comunica/bus-rdf-resolve-hypermedia';
import type { ILink, MediatorRdfResolveHypermediaLinks } from '@comunica/bus-rdf-resolve-hypermedia-links';
import type { ILinkQueue, MediatorRdfResolveHypermediaLinksQueue } from '@comunica/bus-rdf-resolve-hypermedia-links-queue';
import type { IActionContext } from '@comunica/types';
import type * as RDF from '@rdfjs/types';
import type { ISourceState } from './LinkedRdfSourcesAsyncRdfIterator';
import { LinkedRdfSourcesAsyncRdfIterator } from './LinkedRdfSourcesAsyncRdfIterator';
/**
 * An quad iterator that can iterate over consecutive RDF sources
 * that are determined using the rdf-resolve-hypermedia-links bus.
 *
 * @see LinkedRdfSourcesAsyncRdfIterator
 */
export declare class MediatedLinkedRdfSourcesAsyncRdfIterator extends LinkedRdfSourcesAsyncRdfIterator {
    private readonly mediatorDereferenceRdf;
    private readonly mediatorMetadata;
    private readonly mediatorMetadataExtract;
    private readonly mediatorRdfResolveHypermedia;
    private readonly mediatorRdfResolveHypermediaLinks;
    private readonly mediatorRdfResolveHypermediaLinksQueue;
    private readonly context;
    private readonly forceSourceType?;
    private readonly handledUrls;
    private linkQueue;
    constructor(cacheSize: number, context: IActionContext, forceSourceType: string | undefined, subject: RDF.Term, predicate: RDF.Term, object: RDF.Term, graph: RDF.Term, firstUrl: string, maxIterators: number, mediators: IMediatorArgs);
    getLinkQueue(): Promise<ILinkQueue>;
    protected getSourceLinks(metadata: Record<string, any>): Promise<ILink[]>;
    protected getSource(link: ILink, handledDatasets: Record<string, boolean>): Promise<ISourceState>;
}
export interface IMediatorArgs {
    mediatorDereferenceRdf: MediatorDereferenceRdf;
    mediatorMetadata: MediatorRdfMetadata;
    mediatorMetadataExtract: MediatorRdfMetadataExtract;
    mediatorRdfResolveHypermedia: MediatorRdfResolveHypermedia;
    mediatorRdfResolveHypermediaLinks: MediatorRdfResolveHypermediaLinks;
    mediatorRdfResolveHypermediaLinksQueue: MediatorRdfResolveHypermediaLinksQueue;
}

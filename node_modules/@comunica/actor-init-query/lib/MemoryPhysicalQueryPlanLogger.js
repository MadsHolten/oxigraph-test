"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryPhysicalQueryPlanLogger = void 0;
const rdf_string_1 = require("rdf-string");
/**
 * A physical query plan logger that stores everything in memory.
 */
class MemoryPhysicalQueryPlanLogger {
    constructor() {
        this.children = new Map();
    }
    logOperation(logicalOperator, physicalOperator, node, parentNode, actor, metadata) {
        const planNode = {
            actor,
            logicalOperator,
            physicalOperator,
            rawNode: node,
            children: [],
            metadata,
        };
        this.children.set(node, planNode.children);
        if (!this.rootNode) {
            if (parentNode) {
                throw new Error(`No root node has been set yet, while a parent is being referenced`);
            }
            this.rootNode = planNode;
        }
        else {
            if (!parentNode) {
                throw new Error(`Detected more than one parent-less node`);
            }
            const children = this.children.get(parentNode);
            if (!children) {
                throw new Error(`Could not find parent node`);
            }
            children.push(planNode);
        }
    }
    toJson() {
        return this.rootNode ? this.planNodeToJson(this.rootNode) : {};
    }
    planNodeToJson(node) {
        return {
            logical: node.logicalOperator,
            physical: node.physicalOperator,
            ...this.getLogicalMetadata(node.rawNode),
            ...node.metadata,
            ...node.children.length > 0 ? { children: node.children.map(child => this.planNodeToJson(child)) } : {},
        };
    }
    getLogicalMetadata(rawNode) {
        if ('type' in rawNode) {
            const operation = rawNode;
            // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check
            switch (operation.type) {
                case 'pattern':
                    return {
                        pattern: this.quadToString(operation),
                    };
                case 'project':
                    return {
                        variables: operation.variables.map(variable => variable.value),
                    };
            }
        }
        return {};
    }
    quadToString(quad) {
        return `${(0, rdf_string_1.termToString)(quad.subject)} ${(0, rdf_string_1.termToString)(quad.predicate)} ${(0, rdf_string_1.termToString)(quad.object)}${quad.graph.termType === 'DefaultGraph' ? '' : ` ${(0, rdf_string_1.termToString)(quad.graph)}`}`;
    }
}
exports.MemoryPhysicalQueryPlanLogger = MemoryPhysicalQueryPlanLogger;
//# sourceMappingURL=MemoryPhysicalQueryPlanLogger.js.map
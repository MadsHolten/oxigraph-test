"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorQueryOperation = void 0;
const context_entries_1 = require("@comunica/context-entries");
const core_1 = require("@comunica/core");
const data_factory_1 = require("@comunica/data-factory");
const Bindings_1 = require("./Bindings");
/**
 * A counter that keeps track blank node generated through BNODE() SPARQL
 * expressions.
 *
 * @type {number}
 */
let bnodeCounter = 0;
/**
 * A comunica actor for query-operation events.
 *
 * Actor types:
 * * Input:  IActionQueryOperation:      A SPARQL Algebra operation.
 * * Test:   <none>
 * * Output: IActorQueryOperationOutput: A bindings stream.
 *
 * @see IActionQueryOperation
 * @see IQueryOperationResult
 */
class ActorQueryOperation extends core_1.Actor {
    /**
     * @param args - @defaultNested {<default_bus> a <cbqo:components/BusQueryOperation.jsonld#BusQueryOperation>} bus
     */
    constructor(args) {
        super(args);
    }
    /**
     * Safely cast a query operation output to a bindings output.
     * This will throw a runtime error if the output is of the incorrect type.
     * @param {IQueryOperationResult} output A query operation output.
     * @return {IQueryOperationResultBindings} A bindings query operation output.
     */
    static getSafeBindings(output) {
        ActorQueryOperation.validateQueryOutput(output, 'bindings');
        return output;
    }
    /**
     * Safely cast a query operation output to a quads output.
     * This will throw a runtime error if the output is of the incorrect type.
     * @param {IQueryOperationResult} output A query operation output.
     * @return {IQueryOperationResultQuads} A quads query operation output.
     */
    static getSafeQuads(output) {
        ActorQueryOperation.validateQueryOutput(output, 'quads');
        return output;
    }
    /**
     * Safely cast a query operation output to a boolean output.
     * This will throw a runtime error if the output is of the incorrect type.
     * @param {IQueryOperationResult} output A query operation output.
     * @return {IQueryOperationResultBoolean} A boolean query operation output.
     */
    static getSafeBoolean(output) {
        ActorQueryOperation.validateQueryOutput(output, 'boolean');
        return output;
    }
    /**
     * Safely cast a query operation output to a void output.
     * This will throw a runtime error if the output is of the incorrect type.
     * @param {IQueryOperationResult} output A query operation output.
     * @return {IQueryOperationResultVoid} A void query operation output.
     */
    static getSafeVoid(output) {
        ActorQueryOperation.validateQueryOutput(output, 'void');
        return output;
    }
    /**
     * Convert a metadata callback to a lazy callback where the response value is cached.
     * @param {() => Promise<IMetadata>} metadata A metadata callback
     * @return {() => Promise<{[p: string]: any}>} The callback where the response will be cached.
     */
    static cachifyMetadata(metadata) {
        let lastReturn;
        // eslint-disable-next-line no-return-assign,@typescript-eslint/no-misused-promises
        return () => (lastReturn || (lastReturn = metadata()));
    }
    /**
     * Throw an error if the output type does not match the expected type.
     * @param {IQueryOperationResult} output A query operation output.
     * @param {string} expectedType The expected output type.
     */
    static validateQueryOutput(output, expectedType) {
        if (output.type !== expectedType) {
            throw new Error(`Invalid query output type: Expected '${expectedType}' but got '${output.type}'`);
        }
    }
    static getBaseExpressionContext(context) {
        const now = context.get(context_entries_1.KeysInitQuery.queryTimestamp);
        const baseIRI = context.get(context_entries_1.KeysInitQuery.baseIRI);
        // Handle two variants of providing extension functions
        if (context.has(context_entries_1.KeysInitQuery.extensionFunctionCreator) && context.has(context_entries_1.KeysInitQuery.extensionFunctions)) {
            throw new Error('Illegal simultaneous usage of extensionFunctionCreator and extensionFunctions in context');
        }
        let extensionFunctionCreator = context
            .get(context_entries_1.KeysInitQuery.extensionFunctionCreator);
        // Convert dictionary-based variant to callback
        const extensionFunctions = context
            .get(context_entries_1.KeysInitQuery.extensionFunctions);
        if (extensionFunctions) {
            extensionFunctionCreator = functionNamedNode => extensionFunctions[functionNamedNode.value];
        }
        return { now, baseIRI, extensionFunctionCreator };
    }
    /**
     * Create an options object that can be used to construct a sparqlee synchronous evaluator.
     * @param context An action context.
     * @param mediatorQueryOperation An optional query query operation mediator.
     *                               If defined, the existence resolver will be defined as `exists`.
     */
    static getExpressionContext(context, mediatorQueryOperation) {
        return {
            ...this.getBaseExpressionContext(context),
            bnode: (input) => new data_factory_1.BlankNodeBindingsScoped(input || `BNODE_${bnodeCounter++}`),
        };
    }
    /**
     * Create an options object that can be used to construct a sparqlee asynchronous evaluator.
     * @param context An action context.
     * @param mediatorQueryOperation An optional query query operation mediator.
     *                               If defined, the existence resolver will be defined as `exists`.
     */
    static getAsyncExpressionContext(context, mediatorQueryOperation) {
        const expressionContext = {
            ...this.getBaseExpressionContext(context),
            bnode: (input) => Promise.resolve(new data_factory_1.BlankNodeBindingsScoped(input || `BNODE_${bnodeCounter++}`)),
        };
        if (mediatorQueryOperation) {
            expressionContext.exists = ActorQueryOperation.createExistenceResolver(context, mediatorQueryOperation);
        }
        return expressionContext;
    }
    /**
     * Create an existence resolver for usage within an expression context.
     * @param context An action context.
     * @param mediatorQueryOperation A query operation mediator.
     */
    static createExistenceResolver(context, mediatorQueryOperation) {
        return async (expr, bindings) => {
            const operation = (0, Bindings_1.materializeOperation)(expr.input, bindings);
            const outputRaw = await mediatorQueryOperation.mediate({ operation, context });
            const output = ActorQueryOperation.getSafeBindings(outputRaw);
            return new Promise((resolve, reject) => {
                output.bindingsStream.on('end', () => {
                    resolve(false);
                });
                output.bindingsStream.on('error', reject);
                output.bindingsStream.on('data', () => {
                    output.bindingsStream.close();
                    resolve(true);
                });
            })
                .then((exists) => expr.not ? !exists : exists);
        };
    }
    /**
     * Throw an error if the context contains the readOnly flag.
     * @param context An action context.
     */
    static throwOnReadOnly(context) {
        if (context.get(context_entries_1.KeysQueryOperation.readOnly)) {
            throw new Error(`Attempted a write operation in read-only mode`);
        }
    }
}
exports.ActorQueryOperation = ActorQueryOperation;
//# sourceMappingURL=ActorQueryOperation.js.map
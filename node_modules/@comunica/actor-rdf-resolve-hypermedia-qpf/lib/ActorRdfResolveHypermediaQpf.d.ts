import type { MediatorDereferenceRdf } from '@comunica/bus-dereference-rdf';
import type { MediatorRdfMetadata } from '@comunica/bus-rdf-metadata';
import type { MediatorRdfMetadataExtract } from '@comunica/bus-rdf-metadata-extract';
import type { IActionRdfResolveHypermedia, IActorRdfResolveHypermediaOutput, IActorRdfResolveHypermediaTest, IActorRdfResolveHypermediaArgs } from '@comunica/bus-rdf-resolve-hypermedia';
import { ActorRdfResolveHypermedia } from '@comunica/bus-rdf-resolve-hypermedia';
import type { IActionContext } from '@comunica/types';
import type * as RDF from '@rdfjs/types';
import { RdfSourceQpf } from './RdfSourceQpf';
/**
 * A comunica QPF RDF Resolve Quad Pattern Actor.
 */
export declare class ActorRdfResolveHypermediaQpf extends ActorRdfResolveHypermedia implements IActorRdfResolveHypermediaQpfArgs {
    readonly mediatorMetadata: MediatorRdfMetadata;
    readonly mediatorMetadataExtract: MediatorRdfMetadataExtract;
    readonly mediatorDereferenceRdf: MediatorDereferenceRdf;
    readonly subjectUri: string;
    readonly predicateUri: string;
    readonly objectUri: string;
    readonly graphUri?: string;
    constructor(args: IActorRdfResolveHypermediaQpfArgs);
    testMetadata(action: IActionRdfResolveHypermedia): Promise<IActorRdfResolveHypermediaTest>;
    /**
     * Look for the search form
     * @param {IActionRdfResolveHypermedia} action the metadata to look for the form.
     * @return {Promise<IActorRdfResolveHypermediaOutput>} A promise resolving to a hypermedia form.
     */
    run(action: IActionRdfResolveHypermedia): Promise<IActorRdfResolveHypermediaOutput>;
    protected createSource(metadata: Record<string, any>, context: IActionContext, quads?: RDF.Stream): RdfSourceQpf;
}
export interface IActorRdfResolveHypermediaQpfArgs extends IActorRdfResolveHypermediaArgs {
    /**
     * The metadata mediator
     */
    mediatorMetadata: MediatorRdfMetadata;
    /**
     * The metadata extract mediator
     */
    mediatorMetadataExtract: MediatorRdfMetadataExtract;
    /**
     * The RDF dereference mediator
     */
    mediatorDereferenceRdf: MediatorDereferenceRdf;
    /**
     * The URI that should be interpreted as subject URI
     * @default {http://www.w3.org/1999/02/22-rdf-syntax-ns#subject}
     */
    subjectUri: string;
    /**
     * The URI that should be interpreted as predicate URI
     * @default {http://www.w3.org/1999/02/22-rdf-syntax-ns#predicate}
     */
    predicateUri: string;
    /**
     * The URI that should be interpreted as object URI
     * @default {http://www.w3.org/1999/02/22-rdf-syntax-ns#object}
     */
    objectUri: string;
    /**
     * The URI that should be interpreted as graph URI
     * @default {http://www.w3.org/ns/sparql-service-description#graph}
     */
    graphUri?: string;
}

import type { MediatorQueryOperation } from '@comunica/bus-query-operation';
import type { IActionRdfJoin, IActorRdfJoinOutputInner, IActorRdfJoinArgs } from '@comunica/bus-rdf-join';
import { ActorRdfJoin } from '@comunica/bus-rdf-join';
import type { MediatorRdfJoinEntriesSort } from '@comunica/bus-rdf-join-entries-sort';
import type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';
import type { Bindings, BindingsStream, MetadataBindings, IActionContext, IJoinEntryWithMetadata } from '@comunica/types';
import { Factory, Algebra } from 'sparqlalgebrajs';
/**
 * A comunica Multi-way Bind RDF Join Actor.
 */
export declare class ActorRdfJoinMultiBind extends ActorRdfJoin {
    readonly bindOrder: BindOrder;
    readonly selectivityModifier: number;
    readonly mediatorJoinEntriesSort: MediatorRdfJoinEntriesSort;
    readonly mediatorQueryOperation: MediatorQueryOperation;
    static readonly FACTORY: Factory;
    constructor(args: IActorRdfJoinMultiBindArgs);
    /**
     * Create a new bindings stream that takes every binding of the base stream
     * and binds it to the remaining patterns, evaluates those patterns, and emits all their bindings.
     *
     * @param bindOrder The order in which elements should be bound.
     * @param baseStream The base stream.
     * @param operations The operations to bind with each binding of the base stream.
     * @param operationBinder A callback to retrieve the bindings stream of bound operations.
     * @param optional If the original bindings should be emitted when the resulting bindings stream is empty.
     * @return {BindingsStream}
     */
    static createBindStream(bindOrder: BindOrder, baseStream: BindingsStream, operations: Algebra.Operation[], operationBinder: (boundOperations: Algebra.Operation[], operationBindings: Bindings) => Promise<BindingsStream>, optional: boolean): BindingsStream;
    /**
     * Order the given join entries using the join-entries-sort bus.
     * @param {IJoinEntryWithMetadata[]} entries An array of join entries.
     * @param context The action context.
     * @return {IJoinEntryWithMetadata[]} The sorted join entries.
     */
    sortJoinEntries(entries: IJoinEntryWithMetadata[], context: IActionContext): Promise<IJoinEntryWithMetadata[]>;
    getOutput(action: IActionRdfJoin): Promise<IActorRdfJoinOutputInner>;
    getJoinCoefficients(action: IActionRdfJoin, metadatas: MetadataBindings[]): Promise<IMediatorTypeJoinCoefficients>;
}
export interface IActorRdfJoinMultiBindArgs extends IActorRdfJoinArgs {
    /**
     * The order in which elements should be bound
     * @default {depth-first}
     */
    bindOrder: BindOrder;
    /**
     * Multiplier for selectivity values
     * @range {double}
     * @default {0.0001}
     */
    selectivityModifier: number;
    /**
     * The join entries sort mediator
     */
    mediatorJoinEntriesSort: MediatorRdfJoinEntriesSort;
    /**
     * The query operation mediator
     */
    mediatorQueryOperation: MediatorQueryOperation;
}
export declare type BindOrder = 'depth-first' | 'breadth-first';

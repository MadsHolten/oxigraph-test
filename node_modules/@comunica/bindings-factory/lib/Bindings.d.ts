import type * as RDF from '@rdfjs/types';
import { Map } from 'immutable';
/**
 * An immutable.js-based Bindings object.
 */
export declare class Bindings implements RDF.Bindings {
    readonly type = "bindings";
    private readonly dataFactory;
    private readonly entries;
    constructor(dataFactory: RDF.DataFactory, entries: Map<string, RDF.Term>);
    has(key: RDF.Variable | string): boolean;
    get(key: RDF.Variable | string): RDF.Term | undefined;
    set(key: RDF.Variable | string, value: RDF.Term): Bindings;
    delete(key: RDF.Variable | string): Bindings;
    keys(): Iterable<RDF.Variable>;
    values(): Iterable<RDF.Term>;
    forEach(fn: (value: RDF.Term, key: RDF.Variable) => any): void;
    get size(): number;
    [Symbol.iterator](): Iterator<[RDF.Variable, RDF.Term]>;
    equals(other: RDF.Bindings | null | undefined): boolean;
    filter(fn: (value: RDF.Term, key: RDF.Variable) => boolean): Bindings;
    map(fn: (value: RDF.Term, key: RDF.Variable) => RDF.Term): Bindings;
    merge(other: Bindings): Bindings | undefined;
    mergeWith(merger: (self: RDF.Term, other: RDF.Term, key: RDF.Variable) => RDF.Term, other: Bindings): Bindings;
    toString(): string;
    protected mapIterable<T, U>(iterable: Iterable<T>, callback: (value: T) => U): Iterable<U>;
    protected iteratorToIterable<T>(iterator: Iterator<T>): Iterable<T>;
}

/* tslint:disable */
/* eslint-disable */
/**
* @param {string} value
* @returns {NamedNode}
*/
export function namedNode(value: string): NamedNode;
/**
* @param {string | undefined} value
* @returns {BlankNode}
*/
export function blankNode(value?: string): BlankNode;
/**
* @param {string | undefined} value
* @param {any} language_or_datatype
* @returns {Literal}
*/
export function literal(value: string | undefined, language_or_datatype: any): Literal;
/**
* @returns {DefaultGraph}
*/
export function defaultGraph(): DefaultGraph;
/**
* @param {string} value
* @returns {Variable}
*/
export function variable(value: string): Variable;
/**
* @param {any} subject
* @param {any} predicate
* @param {any} object
* @returns {Quad}
*/
export function triple(subject: any, predicate: any, object: any): Quad;
/**
* @param {any} subject
* @param {any} predicate
* @param {any} object
* @param {any} graph
* @returns {Quad}
*/
export function quad(subject: any, predicate: any, object: any, graph: any): Quad;
/**
* @param {any} original
* @returns {any}
*/
export function fromTerm(original: any): any;
/**
* @param {any} original
* @returns {any}
*/
export function fromQuad(original: any): any;
/**
*/
export function main(): void;
/**
*/
export class BlankNode {
  free(): void;
/**
* @returns {string}
*/
  toString(): string;
/**
* @param {any} other
* @returns {boolean}
*/
  equals(other: any): boolean;
/**
*/
  readonly termType: string;
/**
*/
  readonly value: string;
}
/**
*/
export class DefaultGraph {
  free(): void;
/**
* @returns {string}
*/
  toString(): string;
/**
* @param {any} other
* @returns {boolean}
*/
  equals(other: any): boolean;
/**
*/
  readonly termType: string;
/**
*/
  readonly value: string;
}
/**
*/
export class Literal {
  free(): void;
/**
* @returns {string}
*/
  toString(): string;
/**
* @param {any} other
* @returns {boolean}
*/
  equals(other: any): boolean;
/**
*/
  readonly datatype: NamedNode;
/**
*/
  readonly language: string;
/**
*/
  readonly termType: string;
/**
*/
  readonly value: string;
}
/**
*/
export class NamedNode {
  free(): void;
/**
* @returns {string}
*/
  toString(): string;
/**
* @param {any} other
* @returns {boolean}
*/
  equals(other: any): boolean;
/**
*/
  readonly termType: string;
/**
*/
  readonly value: string;
}
/**
*/
export class Quad {
  free(): void;
/**
* @returns {string}
*/
  toString(): string;
/**
* @param {any} other
* @returns {boolean}
*/
  equals(other: any): boolean;
/**
*/
  readonly graph: any;
/**
*/
  readonly object: any;
/**
*/
  readonly predicate: any;
/**
*/
  readonly subject: any;
/**
*/
  readonly termType: string;
/**
*/
  readonly value: string;
}
/**
*/
export class Store {
  free(): void;
/**
* @param {any[] | undefined} quads
*/
  constructor(quads?: any[]);
/**
* @param {any} quad
*/
  add(quad: any): void;
/**
* @param {any} quad
*/
  delete(quad: any): void;
/**
* @param {any} quad
* @returns {boolean}
*/
  has(quad: any): boolean;
/**
* @param {any} subject
* @param {any} predicate
* @param {any} object
* @param {any} graph_name
* @returns {any[]}
*/
  match(subject: any, predicate: any, object: any, graph_name: any): any[];
/**
* @param {string} query
* @returns {any}
*/
  query(query: string): any;
/**
* @param {string} update
*/
  update(update: string): void;
/**
* @param {string} data
* @param {string} mime_type
* @param {any} base_iri
* @param {any} to_graph_name
*/
  load(data: string, mime_type: string, base_iri: any, to_graph_name: any): void;
/**
* @param {string} mime_type
* @param {any} from_graph_name
* @returns {string}
*/
  dump(mime_type: string, from_graph_name: any): string;
/**
*/
  readonly size: number;
}
/**
*/
export class Variable {
  free(): void;
/**
* @returns {string}
*/
  toString(): string;
/**
* @param {any} other
* @returns {boolean}
*/
  equals(other: any): boolean;
/**
*/
  readonly termType: string;
/**
*/
  readonly value: string;
}

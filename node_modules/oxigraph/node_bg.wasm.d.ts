/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function namedNode(a: number, b: number, c: number): void;
export function blankNode(a: number, b: number, c: number): void;
export function literal(a: number, b: number, c: number, d: number): void;
export function defaultGraph(): number;
export function variable(a: number, b: number, c: number): void;
export function triple(a: number, b: number, c: number, d: number): void;
export function quad(a: number, b: number, c: number, d: number, e: number): void;
export function fromTerm(a: number, b: number): void;
export function fromQuad(a: number, b: number): void;
export function __wbg_namednode_free(a: number): void;
export function namednode_term_type(a: number, b: number): void;
export function namednode_value(a: number, b: number): void;
export function namednode_toString(a: number, b: number): void;
export function namednode_equals(a: number, b: number): number;
export function __wbg_blanknode_free(a: number): void;
export function blanknode_term_type(a: number, b: number): void;
export function blanknode_value(a: number, b: number): void;
export function blanknode_toString(a: number, b: number): void;
export function blanknode_equals(a: number, b: number): number;
export function __wbg_literal_free(a: number): void;
export function literal_term_type(a: number, b: number): void;
export function literal_value(a: number, b: number): void;
export function literal_language(a: number, b: number): void;
export function literal_datatype(a: number): number;
export function literal_toString(a: number, b: number): void;
export function literal_equals(a: number, b: number): number;
export function __wbg_defaultgraph_free(a: number): void;
export function defaultgraph_term_type(a: number, b: number): void;
export function defaultgraph_value(a: number, b: number): void;
export function defaultgraph_toString(a: number, b: number): void;
export function defaultgraph_equals(a: number, b: number): number;
export function variable_term_type(a: number, b: number): void;
export function variable_toString(a: number, b: number): void;
export function variable_equals(a: number, b: number): number;
export function __wbg_quad_free(a: number): void;
export function quad_term_type(a: number, b: number): void;
export function quad_value(a: number, b: number): void;
export function quad_subject(a: number): number;
export function quad_predicate(a: number): number;
export function quad_object(a: number): number;
export function quad_graph(a: number): number;
export function quad_toString(a: number, b: number): void;
export function quad_equals(a: number, b: number): number;
export function __wbg_store_free(a: number): void;
export function store_new(a: number, b: number, c: number): void;
export function store_add(a: number, b: number, c: number): void;
export function store_delete(a: number, b: number, c: number): void;
export function store_has(a: number, b: number, c: number): void;
export function store_size(a: number, b: number): void;
export function store_match(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function store_query(a: number, b: number, c: number, d: number): void;
export function store_update(a: number, b: number, c: number, d: number): void;
export function store_load(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function store_dump(a: number, b: number, c: number, d: number, e: number): void;
export function main(): void;
export function __wbg_variable_free(a: number): void;
export function variable_value(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_start(): void;

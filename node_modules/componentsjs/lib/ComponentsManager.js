"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentsManager = void 0;
const fs = require("fs");
const rdf_string_1 = require("rdf-string");
const ComponentsManagerBuilder_1 = require("./loading/ComponentsManagerBuilder");
const ErrorResourcesContext_1 = require("./util/ErrorResourcesContext");
/**
 * A components manager can instantiate components.
 * This manager should be created using {@link ComponentsManager.build}.
 */
class ComponentsManager {
    constructor(options) {
        this.moduleState = options.moduleState;
        this.objectLoader = options.objectLoader;
        this.componentResources = options.componentResources;
        this.configRegistry = options.configRegistry;
        this.dumpErrorState = options.dumpErrorState;
        this.configConstructorPool = options.configConstructorPool;
        this.logger = options.logger;
    }
    /**
     * Create a new {@link ComponentsManager}.
     * @see IComponentsManagerBuilderOptions
     * @param options Settings of the new manager.
     */
    static build(options) {
        return new ComponentsManagerBuilder_1.ComponentsManagerBuilder(options).build();
    }
    /**
     * Instantiate the given instance IRI.
     *
     * This will fail if the instance IRI could not be found
     * in any of the registered configs during the building phase.
     * @param instanceIri The IRI of an instance inside a config.
     * @param settings Optional settings that may influence instantiation.
     */
    async instantiate(instanceIri, settings = {}) {
        try {
            const instanceResource = this.objectLoader.resources[instanceIri];
            if (!instanceResource) {
                throw new Error(`No config instance with IRI ${instanceIri} has been registered`);
            }
            return (await this.configConstructorPool.instantiate(instanceResource, settings));
        }
        catch (error) {
            throw this.generateErrorLog(error);
        }
    }
    /**
     * Retrieve a list of all instantiated Resources.
     */
    getInstantiatedResources() {
        const instances = this.configConstructorPool.getInstanceRegistry();
        return Object.keys(instances)
            .map(key => (0, rdf_string_1.stringToTerm)(key))
            .map(term => this.configRegistry.getInstantiatedResource(term));
    }
    /**
     * Create an `componentsjs-error-state.json` file to represent the application state in the current working directory.
     * @param error The error that causes this error state to be created.
     */
    generateErrorLog(error) {
        if (this.dumpErrorState) {
            const contents = JSON.stringify(Object.assign(Object.assign({}, error instanceof ErrorResourcesContext_1.ErrorResourcesContext ? error.exportContext() : {}), { componentTypes: Object.keys(this.componentResources), moduleState: {
                    mainModulePath: this.moduleState.mainModulePath,
                    componentModules: this.moduleState.componentModules,
                    importPaths: this.moduleState.importPaths,
                    contexts: this.moduleState.contexts,
                    nodeModuleImportPaths: this.moduleState.nodeModuleImportPaths,
                    nodeModulePaths: this.moduleState.nodeModulePaths,
                } }), null, '  ');
            fs.writeFileSync('componentsjs-error-state.json', contents, 'utf8');
            this.logger.error(`Detected fatal error. Generated 'componentsjs-error-state.json' with more information.`);
        }
        return error;
    }
}
exports.ComponentsManager = ComponentsManager;
//# sourceMappingURL=ComponentsManager.js.map
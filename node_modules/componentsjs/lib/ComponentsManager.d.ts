import type { Resource, RdfObjectLoader } from 'rdf-object';
import type { Logger } from 'winston';
import type { IConfigConstructorPool } from './construction/IConfigConstructorPool';
import type { IConstructionSettings } from './construction/IConstructionSettings';
import type { IComponentsManagerBuilderOptions } from './loading/ComponentsManagerBuilder';
import type { ConfigRegistry } from './loading/ConfigRegistry';
import type { IModuleState } from './loading/ModuleStateBuilder';
/**
 * A components manager can instantiate components.
 * This manager should be created using {@link ComponentsManager.build}.
 */
export declare class ComponentsManager<Instance> {
    readonly moduleState: IModuleState;
    readonly objectLoader: RdfObjectLoader;
    readonly componentResources: Record<string, Resource>;
    readonly configRegistry: ConfigRegistry;
    readonly dumpErrorState: boolean;
    readonly configConstructorPool: IConfigConstructorPool<Instance>;
    readonly logger: Logger;
    constructor(options: IComponentsManagerOptions<Instance>);
    /**
     * Create a new {@link ComponentsManager}.
     * @see IComponentsManagerBuilderOptions
     * @param options Settings of the new manager.
     */
    static build<I>(options: IComponentsManagerBuilderOptions<I>): Promise<ComponentsManager<I>>;
    /**
     * Instantiate the given instance IRI.
     *
     * This will fail if the instance IRI could not be found
     * in any of the registered configs during the building phase.
     * @param instanceIri The IRI of an instance inside a config.
     * @param settings Optional settings that may influence instantiation.
     */
    instantiate<T = Instance>(instanceIri: string, settings?: IConstructionSettings): Promise<T>;
    /**
     * Retrieve a list of all instantiated Resources.
     */
    getInstantiatedResources(): Resource[];
    /**
     * Create an `componentsjs-error-state.json` file to represent the application state in the current working directory.
     * @param error The error that causes this error state to be created.
     */
    private generateErrorLog;
}
export interface IComponentsManagerOptions<Instance> {
    moduleState: IModuleState;
    objectLoader: RdfObjectLoader;
    componentResources: Record<string, Resource>;
    configRegistry: ConfigRegistry;
    dumpErrorState: boolean;
    configConstructorPool: IConfigConstructorPool<Instance>;
    logger: Logger;
}

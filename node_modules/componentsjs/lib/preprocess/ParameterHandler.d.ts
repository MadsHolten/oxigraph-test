import type { RdfObjectLoader, Resource } from 'rdf-object';
import type { GenericsContext } from './GenericsContext';
import { ParameterPropertyHandlerRange } from './parameterproperty/ParameterPropertyHandlerRange';
/**
 * Handles component parameters in the context of a config.
 */
export declare class ParameterHandler {
    private readonly objectLoader;
    private readonly parameterPropertyHandlers;
    readonly parameterPropertyHandlerRange: ParameterPropertyHandlerRange;
    constructor(options: IParameterHandlerOptions);
    /**
     * Obtain the values of the given parameter in the context of the given config.
     * @param configRoot The root config resource that we are working in.
     * @param parameter The parameter resource to get the value for.
     * @param configElement Part of the config resource to look for parameter instantiations as predicates.
     * @param genericsContext Context for generic types.
     * @return - The parameter value
     */
    applyParameterValues(configRoot: Resource, parameter: Resource, configElement: Resource, genericsContext: GenericsContext): Resource | undefined;
}
export interface IParameterHandlerOptions {
    objectLoader: RdfObjectLoader;
    typeChecking: boolean;
}

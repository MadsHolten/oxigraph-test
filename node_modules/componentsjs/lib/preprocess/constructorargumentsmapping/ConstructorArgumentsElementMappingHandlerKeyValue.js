"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConstructorArgumentsElementMappingHandlerKeyValue = void 0;
const ErrorResourcesContext_1 = require("../../util/ErrorResourcesContext");
/**
 * Handler for static key-value entries.
 */
class ConstructorArgumentsElementMappingHandlerKeyValue {
    canHandle(configRoot, constructorArgs, configElement, mapper) {
        return Boolean((constructorArgs.property.value || constructorArgs.property.valueRawReference) &&
            !constructorArgs.property.collectEntries);
    }
    handle(configRoot, constructorArgs, configElement, mapper, genericsContext) {
        if (constructorArgs.property.key) {
            // Throw if our key is not a literal
            if (constructorArgs.property.key.type !== 'Literal') {
                throw new ErrorResourcesContext_1.ErrorResourcesContext(`Detected illegal IRI object key, which is only allowed with collectEntries`, {
                    objectKey: constructorArgs.property.key.term.value,
                    constructorArgs,
                    config: configRoot,
                });
            }
            // Key-value
            return this.handleKeyValue(configRoot, constructorArgs, configElement, mapper, genericsContext);
        }
        // Only value
        return this.handleValue(configRoot, constructorArgs, configElement, mapper, genericsContext);
    }
    handleKeyValue(configRoot, constructorArgs, configElement, mapper, genericsContext) {
        const value = mapper.getParameterValue(configRoot, constructorArgs.property.value || constructorArgs.property.valueRawReference, configElement, Boolean(constructorArgs.property.valueRawReference), genericsContext);
        return mapper.objectLoader.createCompactedResource(Object.assign({ key: constructorArgs.property.key }, value ? { value } : {}));
    }
    handleValue(configRoot, constructorArgs, configElement, mapper, genericsContext) {
        const value = mapper.getParameterValue(configRoot, constructorArgs.property.value || constructorArgs.property.valueRawReference, configElement, Boolean(constructorArgs.property.valueRawReference), genericsContext);
        if (!value) {
            return mapper.objectLoader.createCompactedResource({ undefined: true });
        }
        return value;
    }
}
exports.ConstructorArgumentsElementMappingHandlerKeyValue = ConstructorArgumentsElementMappingHandlerKeyValue;
//# sourceMappingURL=ConstructorArgumentsElementMappingHandlerKeyValue.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConstructorArgumentsElementMappingHandlerElements = void 0;
const ErrorResourcesContext_1 = require("../../util/ErrorResourcesContext");
/**
 * Handler for element definition that represents an array.
 */
class ConstructorArgumentsElementMappingHandlerElements {
    canHandle(configRoot, constructorArgs, configElement, mapper) {
        return Boolean(constructorArgs.property.elements);
    }
    handle(configRoot, constructorArgs, configElement, mapper, genericsContext) {
        // Elements must have RDF list values.
        if (!constructorArgs.property.elements.list) {
            throw new ErrorResourcesContext_1.ErrorResourcesContext(`Illegal non-RDF-list elements`, {
                elements: constructorArgs.property.elements,
                constructorArgs,
                config: configRoot,
            });
        }
        // Recursively handle all values in the array
        const entries = [];
        for (const element of constructorArgs.property.elements.list) {
            if (element.type !== 'NamedNode' && !element.property.value && !element.property.valueRawReference) {
                throw new ErrorResourcesContext_1.ErrorResourcesContext(`Illegal elements value, must be an IRI or resource with value/valueRawReference`, {
                    elementValue: element,
                    elements: constructorArgs.property.elements,
                    constructorArgs,
                    config: configRoot,
                });
            }
            const value = mapper.getParameterValue(configRoot, element, configElement, Boolean(element.property.valueRawReference), genericsContext);
            if (value) {
                for (const entry of value.list || [value]) {
                    entries.push(entry);
                }
            }
        }
        return mapper.objectLoader.createCompactedResource({ value: { list: entries } });
    }
}
exports.ConstructorArgumentsElementMappingHandlerElements = ConstructorArgumentsElementMappingHandlerElements;
//# sourceMappingURL=ConstructorArgumentsElementMappingHandlerElements.js.map
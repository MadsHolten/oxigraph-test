"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConstructorArgumentsElementMappingHandlerFields = void 0;
const ErrorResourcesContext_1 = require("../../util/ErrorResourcesContext");
/**
 * Handler for field definitions that contain key-value pairs to form a hash.
 */
class ConstructorArgumentsElementMappingHandlerFields {
    canHandle(configRoot, constructorArgs, configElement, mapper) {
        return Boolean(constructorArgs.property.fields);
    }
    handle(configRoot, constructorArgs, configElement, mapper, genericsContext) {
        if (constructorArgs.properties.fields.length > 1) {
            throw new ErrorResourcesContext_1.ErrorResourcesContext(`Invalid fields: Only one value can be defined, or an RDF list must be provided`, {
                constructorArgs,
                config: configRoot,
            });
        }
        const fields = constructorArgs.properties.fields[0];
        // Recursively handle all field values.
        const entries = [];
        for (const field of fields.list || [fields]) {
            const mapped = mapper
                .applyConstructorArgumentsParameters(configRoot, field, configElement, genericsContext);
            for (const entry of mapped.list || [mapped]) {
                entries.push(entry);
            }
        }
        return mapper.objectLoader.createCompactedResource({ fields: { list: entries } });
    }
}
exports.ConstructorArgumentsElementMappingHandlerFields = ConstructorArgumentsElementMappingHandlerFields;
//# sourceMappingURL=ConstructorArgumentsElementMappingHandlerFields.js.map
import type { Resource } from 'rdf-object';
import type { IComponentConfigPreprocessorHandleResponse } from './ConfigPreprocessorComponent';
import { ConfigPreprocessorComponent } from './ConfigPreprocessorComponent';
import type { IConstructorArgumentsMapper } from './constructorargumentsmapping/IConstructorArgumentsMapper';
import type { GenericsContext } from './GenericsContext';
/**
 * Handles config that refer to a component as type.
 * The component may have parameters that can be applied on the config.
 * Additionally, the component applies a custom constructor arguments mapping for its parameters.
 */
export declare class ConfigPreprocessorComponentMapped extends ConfigPreprocessorComponent implements IConstructorArgumentsMapper {
    private readonly mappingHandlers;
    canHandle(config: Resource): IComponentConfigPreprocessorHandleResponse | undefined;
    transformConstructorArguments(config: Resource, handleResponse: IComponentConfigPreprocessorHandleResponse): Resource;
    applyConstructorArgumentsParameters(configRoot: Resource, constructorArgs: Resource, configElement: Resource, genericsContext: GenericsContext): Resource;
    getParameterValue(configRoot: Resource, parameter: Resource, configElement: Resource, rawValue: boolean, genericsContext: GenericsContext): Resource | undefined;
}

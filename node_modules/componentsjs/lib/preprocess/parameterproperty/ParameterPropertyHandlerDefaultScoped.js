"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParameterPropertyHandlerDefaultScoped = void 0;
const ErrorResourcesContext_1 = require("../../util/ErrorResourcesContext");
/**
 * If no value has been set, and a given default-scope applies, its default value will be set.
 */
class ParameterPropertyHandlerDefaultScoped {
    constructor(objectLoader) {
        this.objectLoader = objectLoader;
    }
    canHandle(value, configRoot, parameter) {
        return Boolean(!value && parameter.property.defaultScoped);
    }
    handle(value, configRoot, parameter, configElement) {
        let applyingValue;
        for (const scoped of parameter.properties.defaultScoped) {
            // Require defaultScope
            if (!scoped.property.defaultScope) {
                throw new ErrorResourcesContext_1.ErrorResourcesContext(`Invalid defaultScoped for parameter "${parameter.value}": Missing defaultScope`, { parameter });
            }
            // Multiple scope type references can be defined
            for (const scopeType of scoped.properties.defaultScope) {
                // Require defaultScopedValue
                if (!scoped.property.defaultScopedValue) {
                    throw new ErrorResourcesContext_1.ErrorResourcesContext(`Invalid defaultScoped for parameter "${parameter.value}": Missing defaultScopedValue`, { parameter });
                }
                // Require RDF list or single value
                if (scoped.properties.defaultScopedValue.length > 1) {
                    throw new ErrorResourcesContext_1.ErrorResourcesContext(`Invalid defaultScoped value for parameter "${parameter.value}": Only one defaultScopedValue can be defined, or an RDF list must be provided`, { parameter });
                }
                // Apply the scope if the config is of the required type (also considering sub-types)
                if (configRoot.isA(scopeType.term)) {
                    applyingValue = !applyingValue ?
                        scoped.property.defaultScopedValue :
                        this.objectLoader.createCompactedResource({
                            list: [
                                ...applyingValue.list || [applyingValue],
                                ...scoped.property.defaultScopedValue.list || [scoped.property.defaultScopedValue],
                            ],
                        });
                }
            }
        }
        return applyingValue;
    }
}
exports.ParameterPropertyHandlerDefaultScoped = ParameterPropertyHandlerDefaultScoped;
//# sourceMappingURL=ParameterPropertyHandlerDefaultScoped.js.map
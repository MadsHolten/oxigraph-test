import type { Resource } from 'rdf-object';
import type { RdfObjectLoader } from 'rdf-object/lib/RdfObjectLoader';
import type { Logger } from 'winston';
import type { IConfigPreprocessor, IConfigPreprocessorTransform } from './IConfigPreprocessor';
/**
 * An {@link IConfigPreprocessor} that handles the overriding of parameters.
 * Values in the given {@link Resource}s will be replaced if any overriding object is found,
 * targeting this resource.
 */
export declare class ConfigPreprocessorOverride implements IConfigPreprocessor<Record<string, Resource>> {
    readonly objectLoader: RdfObjectLoader;
    readonly componentResources: Record<string, Resource>;
    readonly logger: Logger;
    private overrides;
    constructor(options: IComponentConfigPreprocessorOverrideOptions);
    /**
     * Checks if there are any overrides targeting the given resource.
     * @param config - Resource to find overrides for.
     *
     * @returns A key/value object with keys being the properties that have an override.
     */
    canHandle(config: Resource): Record<string, Resource> | undefined;
    /**
     * Override the resource with the stored values.
     * @param config - The resource to override.
     * @param handleResponse - Override values that were found for this resource.
     */
    transform(config: Resource, handleResponse: Record<string, Resource>): IConfigPreprocessorTransform;
    /**
     * Clear all cached overrides so they will be calculated again on the next call.
     */
    reset(): void;
    /**
     * Generates a cache of all overrides found in the object loader.
     * Keys of the object are the identifiers of the resources that need to be modified,
     * values are key/value maps listing all parameters with their new values.
     */
    createOverrideObjects(): Record<string, Record<string, Resource>>;
    /**
     * Finds all Override resources in the object loader and links them to their target resource.
     */
    protected findOverrideTargets(): Iterable<{
        override: Resource;
        target: Resource;
    }>;
    /**
     * Chains all Overrides together if they reference each other.
     * E.g., if the input is a list of Overrides A -> B, B -> C, D -> E,
     * the result wil be [[ A, B, C ], [ D, E ]].
     *
     * @param overrides - All Overrides that have to be combined.
     */
    protected createOverrideChains(overrides: {
        override: Resource;
        target: Resource;
    }[]): Resource[][];
    /**
     * Throws an error in case there are 2 chains targeting the same resource.
     * @param chains - The override chains to check.
     */
    protected validateChains(chains: Resource[][]): void;
    /**
     * Merges all Overrides in a chain to create a single override object
     * containing replacement values for all relevant parameters of the final entry in the chain.
     *
     * @param chain - The chain of Overrides, with a normal resource as the last entry in the array.
     */
    protected chainToOverrideObject(chain: Resource[]): {
        target: string;
        values: Record<string, Resource>;
    };
    /**
     * Finds the final target and its type in an override chain.
     * @param chain - The chain to find the target of.
     */
    protected getChainTarget(chain: Resource[]): {
        target: Resource;
        type: Resource;
    };
    /**
     * Extracts all relevant parameters of an Override with their corresponding new value.
     * @param override - The Override to apply.
     * @param target - The target resource to apply the Override to.
     * @param parameters - The parameters that are relevant for the target.
     */
    protected filterOverrideObject(override: Resource, target: Resource, parameters: Resource[]): Record<string, Resource>;
}
export interface IComponentConfigPreprocessorOverrideOptions {
    objectLoader: RdfObjectLoader;
    componentResources: Record<string, Resource>;
    logger: Logger;
}

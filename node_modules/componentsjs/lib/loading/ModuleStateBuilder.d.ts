/// <reference types="node" />
import type { Logger } from 'winston';
/**
 * Collects the paths to all available modules and components.
 */
export declare class ModuleStateBuilder {
    private readonly logger?;
    constructor(logger?: Logger);
    /**
     * Build the module state.
     * @param req The `require` instance.
     * @param mainModulePathIn An optional path to the main module from which the search should start.
     */
    buildModuleState(req: NodeJS.Require, mainModulePathIn?: string): Promise<IModuleState>;
    /**
     * Determine the default main module path based on the current directory.
     * @param req The `require` instance.
     */
    buildDefaultMainModulePath(req: NodeJS.Require): string;
    /**
     * All paths that need to be considered when handling imports from the current main module path.
     */
    buildNodeModuleImportPaths(mainModulePath: string): string[];
    /**
     * Get all currently available node module paths.
     * @param nodeModuleImportPaths The main module paths to start from.
     */
    buildNodeModulePaths(nodeModuleImportPaths: string[]): Promise<string[]>;
    /**
     * Get all currently available node module paths.
     * @param path The path to start from.
     * @param nodeModulePaths The array of node module paths to append to.
     * @param ignorePaths The paths that should be ignored.
     */
    protected buildNodeModulePathsInner(path: string, nodeModulePaths: string[], ignorePaths: Record<string, boolean>): Promise<void>;
    protected fileExists(path: string, file?: boolean): Promise<boolean>;
    /**
     * Read the package.json files from all the given Node modules.
     * @param nodeModulePaths An array of node module paths.
     */
    buildPackageJsons(nodeModulePaths: string[]): Promise<Record<string, any>>;
    /**
     * Expand `lsd:module` inside package.json's.
     * @param packageJsons Package.json files.
     */
    preprocessPackageJsons(packageJsons: Record<string, any>): Promise<void>;
    /**
     * Expand `lsd:module` inside the given package.json.
     * @param packagePath Full path to the given package root.
     * @param packageJson Package.json contents.
     * @returns If the package has been preprocessed.
     */
    static preprocessPackageJson(packagePath: string, packageJson: Record<string, any>): Promise<boolean>;
    protected shouldOverrideVersion(version: string, key: string, componentVersions: Record<string, string>, warningSuffix: string): boolean;
    /**
     * Get all Components.js modules from the given package.json files.
     * @param packageJsons A hash of Node module path to package.json contents.
     * @return A hash of module id (`lsd:module`) to absolute component paths (`lsd:components`).
     */
    buildComponentModules(packageJsons: Record<string, any>): Promise<Record<string, string>>;
    /**
     * Get all Components.js contexts from the given package.json files.
     * @param packageJsons A hash of Node module path to package.json contents.
     * @return A hash of context id (key of `lsd:contexts`) to absolute context paths (value of `lsd:contexts`).
     */
    buildComponentContexts(packageJsons: Record<string, any>): Promise<Record<string, string>>;
    /**
     * Get all Components.js modules from the given package.json files.
     * @param packageJsons A hash of Node module path to package.json contents.
     * @return A hash of context id (key of `lsd:importPaths`) to absolute context paths (value of `lsd:importPaths`).
     */
    buildComponentImportPaths(packageJsons: Record<string, any>): Promise<Record<string, string>>;
    protected warn(message: string): void;
}
/**
 * Represents a module's state with respect to the discoverable modules and components.
 */
export interface IModuleState {
    /**
     * Path to the current Node module from which all importing is done.
     */
    mainModulePath: string;
    /**
     * All paths that are considered when handling imports.
     * This starts from the main module, and traverses up to parents.
     */
    nodeModuleImportPaths: string[];
    /**
     * All paths to Node modules that are in scope for the current module.
     * All reachable node modules in node_modules folders.
     */
    nodeModulePaths: string[];
    /**
     * A hash of absolute module paths to parsed package.json files (JSON).
     */
    packageJsons: Record<string, any>;
    /**
     * All Components.js modules.
     * This hash maps module IRIs (`lsd:module`)
     * to absolute component paths (`lsd:components`).
     */
    componentModules: Record<string, string>;
    /**
     * All Components.js contexts.
     * This hash maps context IRIs (key of `lsd:contexts`)
     * to absolute context paths (value of `lsd:contexts`).
     */
    contexts: Record<string, string>;
    /**
     * All Components.js import paths.
     * This hash maps import path base IRIs (key of `lsd:importPaths`)
     * to absolute base paths (value of `lsd:importPaths`).
     */
    importPaths: Record<string, string>;
}

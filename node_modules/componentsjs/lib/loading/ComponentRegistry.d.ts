/// <reference types="node" />
import type { Readable } from 'stream';
import type * as RDF from '@rdfjs/types';
import type { Resource, RdfObjectLoader } from 'rdf-object';
import type { Logger } from 'winston';
import type { IModuleState } from './ModuleStateBuilder';
/**
 * Accepts component registrations and modules containing zero or more components.
 *
 * This class will populate the given {@link componentResources} hash.
 * Before the {@link componentResources} hash is used anywhere else,
 * the {@link ComponentRegistryFinalizer} should be invoked on this
 * to make sure that all modules have properly been registered.
 */
export declare class ComponentRegistry {
    private readonly moduleState;
    private readonly objectLoader;
    private readonly logger;
    private readonly componentResources;
    private readonly skipContextValidation;
    constructor(options: IComponentLoaderRegistryOptions);
    /**
     * Register all modules and their components that are available in the {@link IModuleState}.
     *
     * Effectively, this will load in all components that are available in the main package and its dependencies.
     */
    registerAvailableModules(): Promise<void>;
    /**
     * Register a module based on a config URL or local file path.
     * @param urlOrPath An RDF document URL or local file path.
     */
    registerModule(urlOrPath: string): Promise<void>;
    /**
     * Register a module stream.
     * @param stream A triple stream containing a module.
     */
    registerModuleStream(stream: RDF.Stream & Readable): Promise<void>;
    /**
     * Register a module resource.
     * @param moduleResource A module resource.
     */
    registerModuleResource(moduleResource: Resource): void;
    /**
     * Register a component resource.
     * @param component A component resource.
     */
    registerComponent(component: Resource): void;
    /**
     * Check if the given resource is a valid component.
     * A valid component is either an abstract class, a class, or an instance.
     * @param componentResource A resource.
     * @returns {boolean} If the resource is a valid component.
     */
    isValidComponent(componentResource: Resource): boolean;
    /**
     * Require that the given resource is a valid component, otherwise and error is thrown.
     * @param componentResource A resource.
     * @param referencingComponent The optional component referencing the given component.
     */
    requireValidComponent(componentResource: Resource, referencingComponent?: Resource): void;
}
export interface IComponentLoaderRegistryOptions {
    moduleState: IModuleState;
    objectLoader: RdfObjectLoader;
    logger: Logger;
    componentResources: Record<string, Resource>;
    skipContextValidation: boolean;
}

import { RdfObjectLoader } from 'rdf-object';
import type { Logger } from 'winston';
import { ComponentsManager } from '../ComponentsManager';
import type { IConstructionStrategy } from '../construction/strategy/IConstructionStrategy';
import type { LogLevel } from '../util/LogLevel';
import { ComponentRegistry } from './ComponentRegistry';
import { ConfigRegistry } from './ConfigRegistry';
import type { IModuleState } from './ModuleStateBuilder';
/**
 * Builds {@link ComponentsManager}'s based on given options.
 */
export declare class ComponentsManagerBuilder<Instance = any> {
    private readonly mainModulePath;
    private readonly componentLoader;
    private readonly configLoader;
    private readonly constructionStrategy;
    private readonly dumpErrorState;
    private readonly logger;
    private readonly moduleState?;
    private readonly skipContextValidation;
    private readonly typeChecking;
    constructor(options: IComponentsManagerBuilderOptions<Instance>);
    static createLogger(logLevel?: LogLevel): Logger;
    static createObjectLoader(): RdfObjectLoader;
    /**
     * @return A new instance of {@link ComponentsManager}.
     */
    build(): Promise<ComponentsManager<Instance>>;
}
export interface IComponentsManagerBuilderOptions<Instance> {
    /**
     * Absolute path to the package root from which module resolution should start.
     */
    mainModulePath: string;
    /**
     * Callback for registering components and modules.
     * Defaults to an invocation of {@link ComponentRegistry.registerAvailableModules}.
     * @param registry A registry that accept component and module registrations.
     */
    moduleLoader?: (registry: ComponentRegistry) => Promise<void>;
    /**
     * Callback for registering configurations.
     * Defaults to no config registrations.
     * @param registry A registry that accepts configuration registrations.
     */
    configLoader?: (registry: ConfigRegistry) => Promise<void>;
    /**
     * A strategy for constructing instances.
     * Defaults to {@link ConstructionStrategyCommonJs}.
     */
    constructionStrategy?: IConstructionStrategy<Instance>;
    /**
     * If the error state should be dumped into `componentsjs-error-state.json`
     * after failed instantiations.
     * Defaults to `true`.
     */
    dumpErrorState?: boolean;
    /**
     * The logging level.
     * Defaults to `'warn'`.
     */
    logLevel?: LogLevel;
    /**
     * The module state.
     * Defaults to a newly created instances on the {@link mainModulePath}.
     */
    moduleState?: IModuleState;
    /**
     * If JSON-LD context validation should be skipped.
     * Defaults to `true`.
     */
    skipContextValidation?: boolean;
    /**
     * If values for parameters should be type-checked.
     * Defaults to `true`.
     */
    typeChecking?: boolean;
}

import type { RdfObjectLoader, Resource } from 'rdf-object';
import type { Logger } from 'winston';
import type { ComponentRegistry } from './ComponentRegistry';
/**
 * Finalizes module registrations of a {@link ComponentRegistry}.
 */
export declare class ComponentRegistryFinalizer {
    private readonly objectLoader;
    private readonly logger;
    private readonly componentResources;
    private readonly componentRegistry;
    constructor(options: IComponentFinalizerOptions);
    /**
     * Invoke the post-processing of modules and components.
     *
     * Modules that have been loaded from a stream will be fetched
     * from the object loader and saved in {@link componentResources}.
     *
     * All components will be iterated to handle parameter inheritance.
     */
    finalize(): void;
    /**
     * Extend the parameters from this component's super components.
     * @param component The component resource onto which parameters may be added.
     * @param superComponents The components to inherit from.
     */
    inheritParameters(component: Resource, superComponents: Resource[]): void;
    /**
     * Let the given component inherit constructor mappings.
     * For each arg, {@link inheritConstructorArgumentsEntry} will be invoked.
     * @param component The component resource on which inherit constructor arguments inheritance will be invoked.
     */
    inheritConstructorArguments(component: Resource): void;
    /**
     * For each of the given entry's extend references,
     * inherit their fields and add to the current entry.
     * @param constructorArg A root constructor arguments resource
     * @param extendingConstructorArgs The constructor argument resources to inherit from.
     */
    inheritConstructorArgumentsEntry(constructorArg: Resource, extendingConstructorArgs: Resource[]): void;
}
export interface IComponentFinalizerOptions {
    objectLoader: RdfObjectLoader;
    logger: Logger;
    componentResources: Record<string, Resource>;
    componentRegistry: ComponentRegistry;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigRegistry = void 0;
const rdf_string_1 = require("rdf-string");
const RdfParser_1 = require("../rdf/RdfParser");
/**
 * Accepts registrations for configurations that contain instantiations of components.
 */
class ConfigRegistry {
    constructor(options) {
        this.moduleState = options.moduleState;
        this.objectLoader = options.objectLoader;
        this.logger = options.logger;
        this.skipContextValidation = options.skipContextValidation;
    }
    /**
     * Register a config based on a config URL or local file path.
     * @param urlOrPath An RDF document URL or local file path.
     */
    async register(urlOrPath) {
        const data = await RdfParser_1.RdfParser.fetchFileOrUrl(urlOrPath);
        return await this.registerStream(new RdfParser_1.RdfParser().parse(data, {
            path: urlOrPath,
            contexts: this.moduleState.contexts,
            importPaths: this.moduleState.importPaths,
            ignoreImports: false,
            logger: this.logger,
            skipContextValidation: this.skipContextValidation,
        }));
    }
    /**
     * Register a config stream.
     * @param stream A triple stream containing a config.
     */
    async registerStream(stream) {
        await this.objectLoader.import(stream);
    }
    /**
     * Register a manual config.
     * @param configId Unique identifier for this new config.
     * @param componentTypeIri The IRI of a component.
     * @param params A dictionary with named parameters.
     */
    async registerCustom(configId, componentTypeIri, params) {
        // Create ad-hoc resource
        const configResource = this.objectLoader.createCompactedResource({
            '@id': configId,
            types: componentTypeIri,
        });
        for (const key of Object.keys(params)) {
            configResource.property[key] = this.objectLoader.createCompactedResource(`"${params[key]}"`);
        }
    }
    /**
     * Get the instantiated Resource that was registered to the given term.
     * @param term The term of the Resource that was instantiated
     */
    getInstantiatedResource(term) {
        return this.objectLoader.resources[(0, rdf_string_1.termToString)(term)];
    }
}
exports.ConfigRegistry = ConfigRegistry;
//# sourceMappingURL=ConfigRegistry.js.map
/// <reference types="node" />
import type { Readable } from 'stream';
import type * as RDF from '@rdfjs/types';
import type { RdfObjectLoader, Resource } from 'rdf-object';
import type { Logger } from 'winston';
import type { IModuleState } from './ModuleStateBuilder';
/**
 * Accepts registrations for configurations that contain instantiations of components.
 */
export declare class ConfigRegistry {
    private readonly moduleState;
    private readonly objectLoader;
    private readonly logger;
    private readonly skipContextValidation;
    constructor(options: IConfigLoaderRegistryOptions);
    /**
     * Register a config based on a config URL or local file path.
     * @param urlOrPath An RDF document URL or local file path.
     */
    register(urlOrPath: string): Promise<void>;
    /**
     * Register a config stream.
     * @param stream A triple stream containing a config.
     */
    registerStream(stream: RDF.Stream & Readable): Promise<void>;
    /**
     * Register a manual config.
     * @param configId Unique identifier for this new config.
     * @param componentTypeIri The IRI of a component.
     * @param params A dictionary with named parameters.
     */
    registerCustom(configId: string, componentTypeIri: string, params: Record<string, string>): Promise<void>;
    /**
     * Get the instantiated Resource that was registered to the given term.
     * @param term The term of the Resource that was instantiated
     */
    getInstantiatedResource(term: RDF.Term): Resource;
}
export interface IConfigLoaderRegistryOptions {
    moduleState: IModuleState;
    objectLoader: RdfObjectLoader;
    logger: Logger;
    skipContextValidation: boolean;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentsManagerBuilder = void 0;
const fs = require("fs");
const rdf_object_1 = require("rdf-object");
const winston_1 = require("winston");
const ComponentsManager_1 = require("../ComponentsManager");
const ConfigConstructorPool_1 = require("../construction/ConfigConstructorPool");
const ConstructionStrategyCommonJs_1 = require("../construction/strategy/ConstructionStrategyCommonJs");
const ConfigPreprocessorComponent_1 = require("../preprocess/ConfigPreprocessorComponent");
const ConfigPreprocessorComponentMapped_1 = require("../preprocess/ConfigPreprocessorComponentMapped");
const ConfigPreprocessorOverride_1 = require("../preprocess/ConfigPreprocessorOverride");
const ParameterHandler_1 = require("../preprocess/ParameterHandler");
const ComponentRegistry_1 = require("./ComponentRegistry");
const ComponentRegistryFinalizer_1 = require("./ComponentRegistryFinalizer");
const ConfigRegistry_1 = require("./ConfigRegistry");
const ModuleStateBuilder_1 = require("./ModuleStateBuilder");
/**
 * Builds {@link ComponentsManager}'s based on given options.
 */
class ComponentsManagerBuilder {
    constructor(options) {
        this.mainModulePath = options.mainModulePath;
        this.componentLoader = options.moduleLoader || (async (registry) => registry.registerAvailableModules());
        this.configLoader = options.configLoader || (async () => {
            // Do nothing
        });
        this.constructionStrategy = options.constructionStrategy || new ConstructionStrategyCommonJs_1.ConstructionStrategyCommonJs({ req: require });
        this.dumpErrorState = options.dumpErrorState === undefined ? true : Boolean(options.dumpErrorState);
        this.logger = ComponentsManagerBuilder.createLogger(options.logLevel);
        this.moduleState = options.moduleState;
        this.skipContextValidation = options.skipContextValidation === undefined ?
            true :
            Boolean(options.skipContextValidation);
        this.typeChecking = options.typeChecking === undefined ?
            true :
            Boolean(options.typeChecking);
    }
    static createLogger(logLevel = 'warn') {
        return (0, winston_1.createLogger)({
            level: logLevel,
            format: winston_1.format.combine(winston_1.format.label({ label: 'Components.js' }), winston_1.format.colorize(), winston_1.format.timestamp(), winston_1.format.printf(({ level: levelInner, message, label: labelInner, timestamp }) => `${timestamp} [${labelInner}] ${levelInner}: ${message}`)),
            transports: [new winston_1.transports.Console({
                    stderrLevels: ['error', 'warn', 'info', 'verbose', 'debug', 'silly'],
                })],
        });
    }
    static createObjectLoader() {
        return new rdf_object_1.RdfObjectLoader({
            context: JSON.parse(fs.readFileSync(`${__dirname}/../../components/context.jsonld`, 'utf8')),
        });
    }
    /**
     * @return A new instance of {@link ComponentsManager}.
     */
    async build() {
        // Initialize module state
        let moduleState;
        if (this.moduleState) {
            moduleState = this.moduleState;
        }
        else {
            this.logger.info(`Initiating component discovery from ${this.mainModulePath}`);
            moduleState = await new ModuleStateBuilder_1.ModuleStateBuilder(this.logger)
                .buildModuleState(require, this.mainModulePath);
            this.logger.info(`Discovered ${Object.keys(moduleState.componentModules).length} component packages within ${moduleState.nodeModulePaths.length} packages`);
        }
        // Initialize object loader with built-in context
        const objectLoader = ComponentsManagerBuilder.createObjectLoader();
        // Load modules
        this.logger.info(`Initiating component loading`);
        const componentResources = {};
        const componentRegistry = new ComponentRegistry_1.ComponentRegistry({
            moduleState,
            objectLoader,
            logger: this.logger,
            componentResources,
            skipContextValidation: this.skipContextValidation,
        });
        await this.componentLoader(componentRegistry);
        const componentFinalizer = new ComponentRegistryFinalizer_1.ComponentRegistryFinalizer({
            objectLoader,
            logger: this.logger,
            componentResources,
            componentRegistry,
        });
        componentFinalizer.finalize();
        // Load configs
        const configRegistry = new ConfigRegistry_1.ConfigRegistry({
            moduleState,
            objectLoader,
            logger: this.logger,
            skipContextValidation: this.skipContextValidation,
        });
        await this.configLoader(configRegistry);
        this.logger.info(`Loaded configs`);
        // Build constructor pool
        const runTypeConfigs = {};
        const parameterHandler = new ParameterHandler_1.ParameterHandler({ objectLoader, typeChecking: this.typeChecking });
        const configConstructorPool = new ConfigConstructorPool_1.ConfigConstructorPool({
            objectLoader,
            configPreprocessors: [
                new ConfigPreprocessorOverride_1.ConfigPreprocessorOverride({
                    objectLoader,
                    componentResources,
                    logger: this.logger,
                }),
                new ConfigPreprocessorComponentMapped_1.ConfigPreprocessorComponentMapped({
                    objectLoader,
                    runTypeConfigs,
                    componentResources,
                    parameterHandler,
                    logger: this.logger,
                }),
                new ConfigPreprocessorComponent_1.ConfigPreprocessorComponent({
                    objectLoader,
                    componentResources,
                    runTypeConfigs,
                    parameterHandler,
                    logger: this.logger,
                }),
            ],
            constructionStrategy: this.constructionStrategy,
            moduleState,
        });
        return new ComponentsManager_1.ComponentsManager({
            moduleState,
            objectLoader,
            componentResources,
            dumpErrorState: this.dumpErrorState,
            configConstructorPool,
            configRegistry,
            logger: this.logger,
        });
    }
}
exports.ComponentsManagerBuilder = ComponentsManagerBuilder;
//# sourceMappingURL=ComponentsManagerBuilder.js.map
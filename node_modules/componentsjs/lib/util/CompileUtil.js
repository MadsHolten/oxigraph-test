"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileConfig = void 0;
const ComponentsManager_1 = require("../ComponentsManager");
const ConstructionStrategyCommonJsString_1 = require("../construction/strategy/ConstructionStrategyCommonJsString");
/**
 * Compile a configuration stream to a JavaScript source file.
 * @param {string} mainModulePath The main module path.
 * @param {string} configPath Path of the config file.
 * @param {string} configIri IRI of the config element to compile.
 * @param {string} exportVariableName An optional variable name to export instead of the default runner.
 * @param {boolean} asFunction If the exported instance should be exposed as a function,
 *                             which accepts an optional hash of variables.
 * @param {boolean} skipContextValidation If JSON-LD context validation should be skipped.
 * @return {Promise<string>} A string resolving to the JavaScript contents.
 */
async function compileConfig(mainModulePath, configPath, configIri, exportVariableName, asFunction, skipContextValidation) {
    // Set up the components manager
    const constructionStrategy = new ConstructionStrategyCommonJsString_1.ConstructionStrategyCommonJsString({ asFunction, req: require });
    const manager = await ComponentsManager_1.ComponentsManager.build({
        mainModulePath,
        constructionStrategy,
        configLoader: async (registry) => registry.register(configPath),
        skipContextValidation: Boolean(skipContextValidation),
    });
    // Serialize the config
    const serializationVariableName = await manager.instantiate(configIri);
    return constructionStrategy.serializeDocument(serializationVariableName, exportVariableName);
}
exports.compileConfig = compileConfig;
//# sourceMappingURL=CompileUtil.js.map
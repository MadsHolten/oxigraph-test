"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArgumentConstructorHandlerReference = void 0;
/**
 * Handles IRI and blank node arguments as reference to another argument or instance.
 */
class ArgumentConstructorHandlerReference {
    canHandle(value, settings, argsCreator) {
        return Boolean(value.type === 'NamedNode' || value.type === 'BlankNode');
    }
    async handle(value, settings, argsCreator) {
        // Don't instantiate if we ask for shallow construction
        if (settings.shallow) {
            return argsCreator.constructionStrategy.createHash({ settings, entries: [] });
        }
        // Apply lazy construction if needed
        if (value.property.lazy && value.property.lazy.value === 'true') {
            const supplier = () => argsCreator.configConstructorPool.instantiate(value, settings);
            return await argsCreator.constructionStrategy.createLazySupplier({ settings, supplier });
        }
        // Regular construction
        return await argsCreator.configConstructorPool.instantiate(value, settings);
    }
}
exports.ArgumentConstructorHandlerReference = ArgumentConstructorHandlerReference;
//# sourceMappingURL=ArgumentConstructorHandlerReference.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArgumentConstructorHandlerPrimitive = void 0;
/**
 * Handles primitive argument values.
 */
class ArgumentConstructorHandlerPrimitive {
    canHandle(value, settings, argsCreator) {
        return Boolean(value.type === 'Literal');
    }
    async handle(value, settings, argsCreator) {
        // ValueRaw can be set in Util.captureType
        // TODO: improve this, so that the hacked valueRaw is not needed
        const rawValue = 'valueRaw' in value.term ? value.term.valueRaw : value.value;
        // Apply lazy construction if needed
        if (value.property.lazy && value.property.lazy.value === 'true') {
            const supplier = () => Promise.resolve(argsCreator.constructionStrategy
                .createPrimitive({ settings, value: rawValue }));
            return await argsCreator.constructionStrategy.createLazySupplier({ settings, supplier });
        }
        return argsCreator.constructionStrategy.createPrimitive({ settings, value: rawValue });
    }
}
exports.ArgumentConstructorHandlerPrimitive = ArgumentConstructorHandlerPrimitive;
//# sourceMappingURL=ArgumentConstructorHandlerPrimitive.js.map
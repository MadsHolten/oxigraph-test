import type { Resource, RdfObjectLoader } from 'rdf-object';
import type { IModuleState } from '../loading/ModuleStateBuilder';
import type { IArgumentsConstructor } from './argument/IArgumentsConstructor';
import type { IConfigConstructorPool } from './IConfigConstructorPool';
import type { IConstructionSettings } from './IConstructionSettings';
import type { IConstructionStrategy } from './strategy/IConstructionStrategy';
/**
 * Creates instances of raw configs using the configured creation strategy.
 *
 * A raw config MUST adhere to the following shape:
 * * requireName: required
 * * requireElement: optional
 * * arguments: optional
 *
 * Arguments will recursively be converted to instances using {@link IArgumentConstructorHandler}'s.
 *
 * This will always create unique instances of configs.
 * If you want to make sure that instances are reused,
 * be sure to call {@link ConfigConstructorPool} instead.
 */
export declare class ConfigConstructor<Instance> implements IArgumentsConstructor<Instance> {
    private static readonly ARGS_HANDLERS;
    readonly objectLoader: RdfObjectLoader;
    readonly configConstructorPool: IConfigConstructorPool<Instance>;
    readonly constructionStrategy: IConstructionStrategy<Instance>;
    private readonly moduleState;
    constructor(options: IConfigConstructorOptions<Instance>);
    getArgumentValues(values: Resource[], settings: IConstructionSettings): Promise<Instance>;
    getArgumentValue(value: Resource, settings: IConstructionSettings): Promise<Instance>;
    /**
     * Create constructor arguments for the given config's constructor.
     * @param config The config to instantiate.
     * @param settings The settings for creating the instance.
     * @returns New instantiations of the provided arguments.
     */
    createArguments(config: Resource, settings: IConstructionSettings): Promise<Instance[]>;
    /**
     * Create an instance based on the given config.
     * @param config The config to instantiate.
     * @param settings The settings for creating the instance.
     * @returns A new instance of the component.
     */
    createInstance(config: Resource, settings: IConstructionSettings): Promise<Instance>;
}
/**
 * Options for a component factory.
 */
export interface IConfigConstructorOptions<Instance> {
    /**
     * The RDF object loader.
     */
    objectLoader: RdfObjectLoader;
    /**
     * The instance pool.
     */
    configConstructorPool: IConfigConstructorPool<Instance>;
    /**
     * The strategy for construction.
     */
    constructionStrategy: IConstructionStrategy<Instance>;
    /**
     * The module state.
     */
    moduleState: IModuleState;
}

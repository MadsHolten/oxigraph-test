import type { Resource, RdfObjectLoader } from 'rdf-object';
import type { IModuleState } from '../loading/ModuleStateBuilder';
import type { IConfigPreprocessor } from '../preprocess/IConfigPreprocessor';
import type { IConfigConstructorPool } from './IConfigConstructorPool';
import type { IConstructionSettings } from './IConstructionSettings';
import type { IConstructionStrategy } from './strategy/IConstructionStrategy';
/**
 * Manages and creates instances of components based on a given config.
 *
 * This accepts different config variants, as supported by the configured {@link IConfigPreprocessor}'s.
 *
 * This will make sure that configs with the same id will only be instantiated once,
 * and multiple references to configs will always reuse the same instance.
 */
export declare class ConfigConstructorPool<Instance> implements IConfigConstructorPool<Instance> {
    private readonly configPreprocessors;
    private readonly configConstructor;
    private readonly constructionStrategy;
    private instances;
    constructor(options: IInstancePoolOptions<Instance>);
    instantiate(configResource: Resource, settings: IConstructionSettings): Promise<Instance>;
    /**
     * Determine the raw config of the given config.
     * As such, the config can be transformd by zero or more {@link IConfigPreprocessor}'s.
     *
     * @param config Config to possibly transform.
     * @returns The raw config data.
     */
    getRawConfig(config: Resource): Resource;
    /**
     * Check if the given config is valid.
     * Will throw an error if it is invalid.
     * @param rawConfig The config resource to validate.
     */
    validateRawConfig(rawConfig: Resource): void;
    /**
     * Check if the given field of given type exists in the given resource.
     * @param config A resource to look in.
     * @param field A field name to look for.
     * @param type The term type to expect.
     * @param optional If the field is optional.
     */
    validateParam(config: Resource, field: string, type: string, optional?: boolean): void;
    /**
     * Returns the instance registry.
     */
    getInstanceRegistry(): Record<string, Promise<any>>;
    /**
     * Resets all preprocessors and clears the cached instances.
     */
    reset(): void;
}
export interface IInstancePoolOptions<Instance> {
    /**
     * The RDF object loader.
     */
    objectLoader: RdfObjectLoader;
    /**
     * Config preprocessors.
     */
    configPreprocessors: IConfigPreprocessor<any>[];
    /**
     * The strategy for construction.
     */
    constructionStrategy: IConstructionStrategy<Instance>;
    /**
     * The module state.
     */
    moduleState: IModuleState;
}

import type { IModuleState } from '../../loading/ModuleStateBuilder';
import type { ICreationStrategyCommonJsOptions } from './ConstructionStrategyCommonJs';
import type { IConstructionStrategy, ICreationStrategyHashOptions, ICreationStrategyInstanceOptions, ICreationStrategyArrayOptions, ICreationStrategyPrimitiveOptions, ICreationStrategySupplierOptions, ICreationStrategyVariableOptions } from './IConstructionStrategy';
/**
 * A creation strategy for a string representation of CommonJS.
 *
 * When this strategy is plugged into a {@link ComponentsManager},
 * the manager will output a string that represents the name of the variable that has been instantiated.
 * In order to retrieve a string representation of all Common JS logic to construct this variable,
 * the {@link serializeDocument} method can be invoked with this variable string.
 *
 * A typical pattern for using this strategy looks as follows:
 * ```
   const serializationVariableName = await manager.instantiate(configIri);
   const document = constructionStrategy.serializeDocument(serializationVariableName);
 * ```
 *
 * @see compileConfig For a simplified abstraction for using this strategy.
 */
export declare class ConstructionStrategyCommonJsString implements IConstructionStrategy<string> {
    private readonly overrideRequireNames;
    private readonly asFunction;
    private readonly strategyCommonJs;
    private readonly lines;
    constructor(options?: ICreationStrategyCommonJsStringOptions);
    createInstance(options: ICreationStrategyInstanceOptions<string>): string;
    /**
     * Get the path to the main module's main entrypoint.
     * @param moduleState The module state.
     * @return {string} The index module path of the current running module (`"main"` entry in package.json).
     */
    getCurrentRunningModuleMain(moduleState: IModuleState): string;
    createHash(options: ICreationStrategyHashOptions<string>): string;
    createArray(options: ICreationStrategyArrayOptions<string>): string;
    createLazySupplier(options: ICreationStrategySupplierOptions<string>): Promise<string>;
    createPrimitive(options: ICreationStrategyPrimitiveOptions<string>): string;
    getVariableValue(options: ICreationStrategyVariableOptions<string>): string;
    createUndefined(): string;
    /**
     * Deterministically converts a URI to a variable name that is safe for usage within JavaScript.
     * @param {string} uri A URI.
     * @return {string} A variable name.
     */
    static uriToVariableName(uri: string): string;
    /**
     * Serialize a full Common JS document to a string.
     * @param serializationVariableName The resulting string when calling {@link ComponentsManager.instantiate}.
     * @param exportVariableName An optional variable name that should be exported
     *                           instead of the default (serializationVariableName).
     */
    serializeDocument(serializationVariableName: string, exportVariableName?: string): string;
}
export interface ICreationStrategyCommonJsStringOptions extends ICreationStrategyCommonJsOptions {
    /**
     * If the exported instance should be exposed as a function, which accepts an optional hash of variables.
     * If this is true, variables will be extracted from the `variables` hash.
     */
    asFunction?: boolean;
}

/// <reference types="node" />
import type { IModuleState } from '../../loading/ModuleStateBuilder';
import type { ICreationStrategyInstanceOptions, IConstructionStrategy, ICreationStrategyHashOptions, ICreationStrategyArrayOptions, ICreationStrategySupplierOptions, ICreationStrategyPrimitiveOptions, ICreationStrategyVariableOptions } from './IConstructionStrategy';
/**
 * A creation strategy for creating instances with CommonJS.
 */
export declare class ConstructionStrategyCommonJs implements IConstructionStrategy<any> {
    private readonly overrideRequireNames;
    private readonly req;
    constructor(options?: ICreationStrategyCommonJsOptions);
    createInstance(options: ICreationStrategyInstanceOptions<any>): any;
    /**
     * Require the given module iff the module is the current main module.
     * This is done by looking for the nearest package.json.
     * @param moduleState The module state.
     * @param requireName The module name that should be required.
     * @returns {any} The require() result
     */
    requireCurrentRunningModuleIfCurrent(moduleState: IModuleState, requireName: string): {
        value: any;
    } | false;
    createHash(options: ICreationStrategyHashOptions<any>): any;
    createArray(options: ICreationStrategyArrayOptions<any>): any;
    createLazySupplier(options: ICreationStrategySupplierOptions<any>): Promise<any>;
    createPrimitive(options: ICreationStrategyPrimitiveOptions<any>): any;
    getVariableValue(options: ICreationStrategyVariableOptions<any>): any;
    createUndefined(): any;
}
export interface ICreationStrategyCommonJsOptions {
    /**
     * Overrides for `require()` calls.
     * For example, an override entry `abc -> def` will map all calls from `require('abc')` to `require('def')`.
     */
    overrideRequireNames?: Record<string, string>;
    /**
     * The `require` instance.
     */
    req: NodeJS.Require;
}

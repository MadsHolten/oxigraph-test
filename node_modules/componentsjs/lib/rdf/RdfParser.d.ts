/// <reference types="node" />
import type { Readable } from 'stream';
import type * as RDF from '@rdfjs/types';
import type { ParseOptions } from 'rdf-parse';
import type { Logger } from 'winston';
/**
 * Parses a data stream to a triple stream.
 */
export declare class RdfParser {
    /**
     * Parses the given stream into RDF quads.
     * @param textStream A text stream.
     * @param options Parsing options.
     */
    parse(textStream: NodeJS.ReadableStream, options: RdfParserOptions): RDF.Stream & Readable;
    /**
     * Get the file contents from a file path or URL.
     * @param pathOrUrl The file path or url.
     * @returns {Promise<T>} A promise resolving to the data stream.
     */
    static fetchFileOrUrl(pathOrUrl: string): Promise<Readable>;
    /**
     * Add the path to an error message.
     * @param error The original error message.
     * @param path The file path or URL.
     * @returns {Error} The new error with file path context.
     */
    static addPathToError(error: Error, path: string): Error;
}
export declare type RdfParserOptions = ParseOptions & {
    /**
     * If imports in the RDF document should be ignored.
     */
    ignoreImports?: boolean;
    /**
     * The file name or URL that is being parsed.
     */
    path: string;
    /**
     * The cached JSON-LD contexts.
     */
    contexts?: Record<string, any>;
    /**
     * The cached import paths. (URL -> file)
     */
    importPaths?: Record<string, string>;
    /**
     * The path this file has been imported from.
     * Undefined if this file is the root file.
     */
    importedFromPath?: string;
    /**
     * An optional logger.
     */
    logger?: Logger;
    /**
     * If JSON-LD context validation should be skipped.
     */
    skipContextValidation?: boolean;
};

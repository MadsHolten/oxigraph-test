/// <reference types="node" />
import type { TransformCallback } from 'stream';
import { Transform } from 'stream';
import type * as RDF from '@rdfjs/types';
import type { RdfParserOptions } from './RdfParser';
/**
 * A RdfStreamIncluder takes a triple stream and detects owl:includes to automatically include other files.
 */
export declare class RdfStreamIncluder extends Transform {
    private runningImporters;
    private readonly parserOptions;
    private flushCallback;
    constructor(parserOptions: RdfParserOptions);
    _transform(quad: RDF.Quad, encoding: string, callback: TransformCallback): boolean;
    _flush(callback: TransformCallback): void;
    /**
     * Follow all import links in the given quad.
     * @param quad A quad.
     */
    handleImports(quad: RDF.Quad): void;
    /**
     * Emit a warning for all named nodes in the given quad that may be invalid.
     * @param quad A quad.
     */
    validateIris(quad: RDF.Quad): void;
    /**
     * Check if the given IRI is valid.
     * @param iri A potential IRI.
     */
    static isValidIri(iri: string): boolean;
}

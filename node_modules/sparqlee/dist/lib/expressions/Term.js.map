{"version":3,"file":"Term.js","sourceRoot":"","sources":["../../../lib/expressions/Term.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\n\nimport type { MainSparqlType, MainNumericSparqlType } from '../util/Consts';\nimport * as C from '../util/Consts';\nimport { TypeAlias, TypeURL } from '../util/Consts';\nimport * as Err from '../util/Errors';\nimport type { ISuperTypeProvider } from '../util/TypeHandling';\nimport { isSubTypeOf } from '../util/TypeHandling';\nimport type { TermExpression, TermType } from './Expressions';\nimport { ExpressionType } from './Expressions';\n\nconst DF = new DataFactory();\n\nexport abstract class Term implements TermExpression {\n  public expressionType: ExpressionType.Term = ExpressionType.Term;\n  abstract termType: TermType;\n\n  abstract toRDF(): RDF.Term;\n\n  public str(): string {\n    throw new Err.InvalidArgumentTypes([ this ], C.RegularOperator.STR);\n  }\n\n  public coerceEBV(): boolean {\n    throw new Err.EBVCoercionError(this);\n  }\n}\n\n// NamedNodes -----------------------------------------------------------------\nexport class NamedNode extends Term {\n  public termType: TermType = 'namedNode';\n  public constructor(public value: string) {\n    super();\n  }\n\n  public toRDF(): RDF.Term {\n    return DF.namedNode(this.value);\n  }\n\n  public str(): string {\n    return this.value;\n  }\n}\n\n// BlankNodes -----------------------------------------------------------------\n\nexport class BlankNode extends Term {\n  public static _nextID = 0;\n\n  public value: RDF.BlankNode;\n  public termType: TermType = 'blankNode';\n\n  public constructor(value: RDF.BlankNode | string) {\n    super();\n    this.value = typeof value === 'string' ? DF.blankNode(value) : value;\n  }\n\n  public static nextID(): string {\n    BlankNode._nextID += 1;\n    return BlankNode.nextID.toString();\n  }\n\n  public toRDF(): RDF.Term {\n    return this.value;\n  }\n}\n\n// Literals-- -----------------------------------------------------------------\nexport function isLiteralTermExpression(expr: TermExpression): Literal<any> | undefined {\n  if (expr.termType === 'literal') {\n    return <Literal<any>> expr;\n  }\n  return undefined;\n}\nexport class Literal<T extends { toString: () => string }> extends Term {\n  public termType: 'literal' = 'literal';\n  public readonly mainSparqlType: MainSparqlType;\n  /**\n   * @param typedValue internal representation of this literal's value\n   * @param dataType a string representing the datatype. Can be of type @see LiteralTypes or any URI\n   * @param strValue the string value of this literal. In other words, the string representing the RDF.literal value.\n   * @param language the language, mainly for language enabled strings like RDF_LANG_STRING\n   * @param mainSparqlType the type used by sparql's main functions\n   */\n  public constructor(\n    public typedValue: T,\n    public dataType: string,\n    public strValue?: string,\n    public language?: string,\n    mainSparqlType?: MainSparqlType,\n  ) {\n    super();\n    this.mainSparqlType = mainSparqlType || 'other';\n  }\n\n  public toRDF(): RDF.Literal {\n    return DF.literal(\n      this.strValue || this.str(),\n      this.language || DF.namedNode(this.dataType),\n    );\n  }\n\n  public str(): string {\n    return this.strValue || this.typedValue.toString();\n  }\n}\n\nexport abstract class NumericLiteral extends Literal<number> {\n  public readonly mainSparqlType: MainNumericSparqlType;\n  public constructor(\n    public typedValue: number,\n    dataType: string,\n    public strValue?: string,\n    public language?: string,\n    mainSparqlType?: MainNumericSparqlType,\n  ) {\n    super(typedValue, dataType, strValue, language, mainSparqlType);\n  }\n\n  protected abstract specificFormatter(val: number): string;\n\n  public coerceEBV(): boolean {\n    return !!this.typedValue;\n  }\n\n  public toRDF(): RDF.Literal {\n    const term = super.toRDF();\n    if (!Number.isFinite(this.typedValue)) {\n      term.value = term.value.replace('Infinity', 'INF');\n    }\n    return term;\n  }\n\n  public str(): string {\n    return this.strValue ||\n      this.specificFormatter(this.typedValue);\n  }\n}\n\nexport class IntegerLiteral extends NumericLiteral {\n  public constructor(\n    public typedValue: number,\n    dataType?: string,\n    public strValue?: string,\n    public language?: string,\n  ) {\n    super(typedValue, dataType || TypeURL.XSD_INTEGER, strValue, language, 'integer');\n  }\n\n  protected specificFormatter(val: number): string {\n    return val.toFixed(0);\n  }\n}\n\nexport class DecimalLiteral extends NumericLiteral {\n  public constructor(\n    public typedValue: number,\n    dataType?: string,\n    public strValue?: string,\n    public language?: string,\n  ) {\n    super(typedValue, dataType || TypeURL.XSD_DECIMAL, strValue, language, 'decimal');\n  }\n\n  protected specificFormatter(val: number): string {\n    return val.toString();\n  }\n}\n\nexport class FloatLiteral extends NumericLiteral {\n  public constructor(\n    public typedValue: number,\n    dataType?: string,\n    public strValue?: string,\n    public language?: string,\n  ) {\n    super(typedValue, dataType || TypeURL.XSD_FLOAT, strValue, language, 'float');\n  }\n\n  protected specificFormatter(val: number): string {\n    return val.toString();\n  }\n}\n\nexport class DoubleLiteral extends NumericLiteral {\n  public constructor(\n    public typedValue: number,\n    dataType?: string,\n    public strValue?: string,\n    public language?: string,\n  ) {\n    super(typedValue, dataType || TypeURL.XSD_DOUBLE, strValue, language, 'double');\n  }\n\n  protected specificFormatter(val: number): string {\n    const jsExponential = val.toExponential();\n    const [ jsMantisse, jsExponent ] = jsExponential.split('e');\n\n    // Leading + must be removed for integer\n    // https://www.w3.org/TR/xmlschema-2/#integer\n    const exponent = jsExponent.replace(/\\+/u, '');\n\n    // SPARQL test suite prefers trailing zero's\n    const mantisse = jsMantisse.includes('.') ?\n      jsMantisse :\n      `${jsMantisse}.0`;\n\n    return `${mantisse}E${exponent}`;\n  }\n}\n\nexport class BooleanLiteral extends Literal<boolean> {\n  public constructor(public typedValue: boolean, public strValue?: string, dataType?: string) {\n    super(typedValue, dataType || TypeURL.XSD_BOOLEAN, strValue, undefined, 'boolean');\n  }\n\n  public coerceEBV(): boolean {\n    return !!this.typedValue;\n  }\n}\n\nexport class DateTimeLiteral extends Literal<Date> {\n  // StrValue is mandatory here because toISOString will always add\n  // milliseconds, even if they were not present.\n  public constructor(public typedValue: Date, public strValue: string, dataType?: string) {\n    super(typedValue, dataType || TypeURL.XSD_DATE_TIME, strValue, undefined, 'dateTime');\n  }\n}\n\nexport class LangStringLiteral extends Literal<string> {\n  public constructor(public typedValue: string, public language: string, dataType?: string) {\n    super(typedValue, dataType || TypeURL.RDF_LANG_STRING, typedValue, language, 'langString');\n  }\n\n  public coerceEBV(): boolean {\n    return this.str().length > 0;\n  }\n}\n\n// https://www.w3.org/TR/2004/REC-rdf-concepts-20040210/#dfn-plain-literal\n// https://www.w3.org/TR/sparql11-query/#defn_SimpleLiteral\n// https://www.w3.org/TR/sparql11-query/#func-strings\n// This does not include language tagged literals\nexport class StringLiteral extends Literal<string> {\n  /**\n   * @param typedValue\n   * @param dataType Should be type that implements XSD_STRING\n   */\n  public constructor(public typedValue: string, dataType?: string) {\n    super(typedValue, dataType || TypeURL.XSD_STRING, typedValue, undefined, 'string');\n  }\n\n  public coerceEBV(): boolean {\n    return this.str().length > 0;\n  }\n}\n\n/**\n * This class is used when a literal is parsed, and it's value is\n * an invalid lexical form for it's datatype. The spec defines value with\n * invalid lexical form are still valid terms, and as such we can not error\n * immediately. This class makes sure that the typedValue will remain undefined,\n * and the category 'nonlexical'. This way, only when operators apply to the\n * 'nonlexical' category, they will keep working, otherwise they will throw a\n * type error.\n * This seems to match the spec, except maybe for functions that accept\n * non-lexical values for their datatype.\n *\n * See:\n *  - https://www.w3.org/TR/xquery/#dt-type-error\n *  - https://www.w3.org/TR/rdf-concepts/#section-Literal-Value\n *  - https://www.w3.org/TR/xquery/#dt-ebv\n *  - ... some other more precise thing i can't find...\n */\nexport class NonLexicalLiteral extends Literal<{ toString: () => 'undefined' }> {\n  public constructor(\n    typedValue: undefined,\n    public typeURL: string,\n    private readonly openWorldType: ISuperTypeProvider,\n    strValue?: string,\n    language?: string,\n  ) {\n    super({ toString: () => 'undefined' }, typeURL, strValue, language, 'nonlexical');\n    this.typedValue = { toString: () => 'undefined' };\n    this.dataType = TypeAlias.SPARQL_NON_LEXICAL;\n  }\n\n  public coerceEBV(): boolean {\n    const isNumericOrBool =\n      isSubTypeOf(this.typeURL, TypeURL.XSD_BOOLEAN, this.openWorldType) ||\n      isSubTypeOf(this.typeURL, TypeAlias.SPARQL_NUMERIC, this.openWorldType);\n    if (isNumericOrBool) {\n      return false;\n    }\n    throw new Err.EBVCoercionError(this);\n  }\n\n  public toRDF(): RDF.Literal {\n    return DF.literal(\n      this.str(),\n      this.language || DF.namedNode(this.typeURL),\n    );\n  }\n\n  public str(): string {\n    return this.strValue || '';\n  }\n}\n\nexport function isNonLexicalLiteral(lit: Literal<any>): NonLexicalLiteral | undefined {\n  if (lit.dataType === TypeAlias.SPARQL_NON_LEXICAL) {\n    return <NonLexicalLiteral> lit;\n  }\n  return undefined;\n}\n"]}
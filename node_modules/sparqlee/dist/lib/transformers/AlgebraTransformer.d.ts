import { Algebra as Alg } from 'sparqlalgebrajs';
import type { AsyncExtensionFunctionCreator } from '../evaluators/AsyncEvaluator';
import type { ICompleteSharedContext } from '../evaluators/evaluatorHelpers/BaseExpressionEvaluator';
import type { SyncExtensionFunctionCreator } from '../evaluators/SyncEvaluator';
import * as E from '../expressions';
import type { ITermTransformer } from './TermTransformer';
import { TermTransformer } from './TermTransformer';
declare type FunctionCreatorConfig = {
    type: 'sync';
    creator: SyncExtensionFunctionCreator;
} | {
    type: 'async';
    creator: AsyncExtensionFunctionCreator;
};
declare type AlgebraTransformConfig = ICompleteSharedContext & FunctionCreatorConfig;
export interface IAlgebraTransformer extends ITermTransformer {
    transformAlgebra: (expr: Alg.Expression) => E.Expression;
}
export declare class AlgebraTransformer extends TermTransformer implements IAlgebraTransformer {
    protected readonly algebraConfig: AlgebraTransformConfig;
    private readonly creatorConfig;
    constructor(algebraConfig: AlgebraTransformConfig);
    transformAlgebra(expr: Alg.Expression): E.Expression;
    private static transformWildcard;
    private transformOperator;
    private wrapSyncFunction;
    private wrapAsyncFunction;
    private transformNamed;
    private static hasCorrectArity;
    static transformAggregate(expr: Alg.AggregateExpression): E.Aggregate;
    static transformExistence(expr: Alg.ExistenceExpression): E.Existence;
}
export {};

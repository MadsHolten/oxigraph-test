import type * as RDF from '@rdfjs/types';
import type { Algebra as Alg } from 'sparqlalgebrajs';
import * as E from '../expressions';
import type { ISuperTypeProvider } from '../util/TypeHandling';
export interface ITermTransformer {
    transformRDFTermUnsafe: (term: RDF.Term) => E.Term;
    transformLiteral: (lit: RDF.Literal) => E.Literal<any>;
}
export declare class TermTransformer implements ITermTransformer {
    protected readonly superTypeProvider: ISuperTypeProvider;
    protected readonly enableExtendedXSDTypes: boolean;
    constructor(superTypeProvider: ISuperTypeProvider, enableExtendedXSDTypes: boolean);
    /**
     * Transforms an RDF term to the internal representation of a term,
     * assuming it is not a variable, which would be an expression (internally).
     *
     * @param term RDF term to transform into internal representation of a term
     */
    transformRDFTermUnsafe(term: RDF.Term): E.Term;
    protected transformTerm(term: Alg.TermExpression): E.Expression;
    private legacyTransformLiteral;
    transformLiteral(lit: RDF.Literal): E.Literal<any>;
    /**
     * @param lit the rdf literal we want to transform to an internal Literal expression.
     */
    private experimentalTransformLiteral;
}

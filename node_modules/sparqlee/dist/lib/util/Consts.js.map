{"version":3,"file":"Consts.js","sourceRoot":"","sources":["../../../lib/util/Consts.ts"],"names":[],"mappings":";;;AAEA,IAAY,SAWX;AAXD,WAAY,SAAS;IACnB,0FAA0F;IAC1F,8CAAiC,CAAA;IACjC;;;;;OAKG;IACH,gDAAmC,CAAA;IACnC,sDAAyC,CAAA;AAC3C,CAAC,EAXW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAWpB;AAED,IAAY,OAkDX;AAlDD,WAAY,OAAO;IACjB,kEAAuD,CAAA;IACvD,iEAAsD,CAAA;IACtD,oFAAyE,CAAA;IAEzE,mEAAwD,CAAA;IAExD,sEAA2D,CAAA;IAC3D,iFAAsE,CAAA;IACtE,6DAAkD,CAAA;IAElD,gBAAgB;IAChB,mEAAwD,CAAA;IACxD,+DAAoD,CAAA;IACpD,iEAAsD,CAAA;IAEtD,wBAAwB;IACxB,mEAAwD,CAAA;IAExD,2FAAgF,CAAA;IAChF,oFAAyE,CAAA;IAEzE,6DAAkD,CAAA;IAClD,2DAAgD,CAAA;IAChD,+DAAoD,CAAA;IACpD,6DAAkD,CAAA;IAElD,2FAAgF,CAAA;IAChF,oFAAyE,CAAA;IACzE,8EAAmE,CAAA;IACnE,4EAAiE,CAAA;IACjE,gFAAqE,CAAA;IACrE,8EAAmE,CAAA;IAEnE,sBAAsB;IACtB,sFAA2E,CAAA;IAC3E,+DAAoD,CAAA;IACpD,qEAA0D,CAAA;IAC1D,oEAAyD,CAAA;IAEzD,6DAAkD,CAAA;IAClD,kEAAuD,CAAA;IACvD,iEAAsD,CAAA;IACtD,yDAA8C,CAAA;IAC9C,gEAAqD,CAAA;IAErD,cAAc;IACd,qEAA0D,CAAA;IAC1D,yFAA8E,CAAA;IAC9E,oFAAyE,CAAA;AAC3E,CAAC,EAlDW,OAAO,GAAP,eAAO,KAAP,eAAO,QAkDlB;AA0BD,sCAAsC;AACtC,IAAY,eA0FX;AA1FD,WAAY,eAAe;IACzB,mBAAmB;IACnB,wDAAwD;IACxD,4BAAS,CAAA;IACT,oCAAiB,CAAA;IACjB,kCAAe,CAAA;IACf,sCAAsC;IACtC,sCAAsC;IAEtC,8BAAW,CAAA;IACX,mCAAgB,CAAA;IAChB,2BAAQ,CAAA;IACR,2BAAQ,CAAA;IACR,6BAAU,CAAA;IACV,6BAAU,CAAA;IAEV,uCAAoB,CAAA;IACpB,iCAAc,CAAA;IACd,iCAAc,CAAA;IACd,oCAAiB,CAAA;IAEjB,mBAAmB;IACnB,mDAAmD;IACnD,uBAAuB;IAEvB,yBAAyB;IACzB,sDAAsD;IACtD,mCAAgB,CAAA;IAChB,uCAAoB,CAAA;IACpB,2CAAwB,CAAA;IACxB,2CAAwB,CAAA;IACxB,8BAAW,CAAA;IACX,gCAAa,CAAA;IACb,wCAAqB,CAAA;IACrB,8BAAW,CAAA;IACX,8BAAW,CAAA;IACX,2CAA2C;IAC3C,kCAAe,CAAA;IACf,sCAAmB,CAAA;IACnB,gCAAa,CAAA;IACb,sCAAmB,CAAA;IAEnB,uBAAuB;IACvB,qDAAqD;IACrD,oCAAiB,CAAA;IACjB,oCAAiB,CAAA;IACjB,kCAAe,CAAA;IACf,kCAAe,CAAA;IACf,0CAAuB,CAAA;IACvB,sCAAmB,CAAA;IACnB,wCAAqB,CAAA;IACrB,0CAAuB,CAAA;IACvB,wCAAqB,CAAA;IACrB,oDAAiC,CAAA;IACjC,4CAA4C;IAC5C,+CAA4B,CAAA;IAC5B,kCAAe,CAAA;IACf,sCAAmB,CAAA;IAEnB,wBAAwB;IACxB,sDAAsD;IACtD,8BAAW,CAAA;IACX,kCAAe,CAAA;IACf,gCAAa,CAAA;IACb,kCAAe,CAAA;IACf,gCAAa,CAAA;IAEb,+BAA+B;IAC/B,uDAAuD;IACvD,8BAAW,CAAA;IACX,gCAAa,CAAA;IACb,kCAAe,CAAA;IACf,8BAAW,CAAA;IACX,kCAAe,CAAA;IACf,sCAAmB,CAAA;IACnB,sCAAmB,CAAA;IACnB,wCAAqB,CAAA;IACrB,4BAAS,CAAA;IAET,iBAAiB;IACjB,kDAAkD;IAClD,8BAAW,CAAA;IACX,gCAAa,CAAA;IACb,oCAAiB,CAAA;IACjB,oCAAiB,CAAA;IACjB,oCAAiB,CAAA;IAEjB,8BAA8B;IAC9B,wDAAwD;IACxD,sBAAsB;AACxB,CAAC,EA1FW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QA0F1B;AAED,IAAY,eAmBX;AAnBD,WAAY,eAAe;IACzB,mBAAmB;IACnB,mDAAmD;IACnD,kCAAe,CAAA;IACf,4BAAS,CAAA;IACT,wCAAqB,CAAA;IACrB,2BAA2B;IAC3B,oCAAiB,CAAA;IACjB,qCAAkB,CAAA;IAClB,uCAAuC;IACvC,yCAAsB,CAAA;IACtB,4BAAS,CAAA;IACT,mCAAgB,CAAA;IAEhB,0CAA0C;IAC1C,oCAAiB,CAAA;IAEjB,8BAA8B;IAC9B,kCAAe,CAAA;AACjB,CAAC,EAnBW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAmB1B;AAEY,QAAA,gBAAgB,GAAgB,IAAI,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;AACxE,QAAA,gBAAgB,GAAgB,IAAI,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;AACxE,QAAA,SAAS,GAAG,IAAI,GAAG,CAAC,CAAE,GAAG,wBAAgB,EAAE,GAAG,wBAAgB,CAAE,CAAC,CAAC;AAE/E,IAAY,WAQX;AARD,WAAY,WAAW;IACrB,8BAAe,CAAA;IACf,0BAAW,CAAA;IACX,0BAAW,CAAA;IACX,0BAAW,CAAA;IACX,0BAAW,CAAA;IACX,4CAA6B,CAAA;IAC7B,gCAAiB,CAAA;AACnB,CAAC,EARW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAQtB;AACY,QAAA,YAAY,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;AAcnD,QAAA,cAAc,GAAG,IAAI,GAAG,CAAC;IACpC,OAAO,CAAC,UAAU;IAClB,OAAO,CAAC,SAAS;IACjB,OAAO,CAAC,UAAU;IAClB,OAAO,CAAC,WAAW;IACnB,OAAO,CAAC,WAAW;IACnB,OAAO,CAAC,aAAa;IACrB,OAAO,CAAC,QAAQ;IAChB,OAAO,CAAC,WAAW;CACpB,CAAC,CAAC","sourcesContent":["export type KnownLiteralTypes = TypeAlias | TypeURL;\n\nexport enum TypeAlias {\n  // Numeric is everything defined in https://www.w3.org/TR/sparql11-query/#operandDataTypes\n  SPARQL_NUMERIC = 'SPARQL_NUMERIC',\n  /**\n   * Stringly is everything defined in https://www.w3.org/TR/sparql11-query/#func-strings\n   * In other words it is a simple literal, a plain literal with language tag, or a literal with datatype xsd:string\n   * In other words, since sparqlee transforms a simple literal to xsd_string. It is RDF_LANG_STRING or XSD_STRING.\n   * Reasons for this are mentioned here: w3c/sparql-12#112\n   */\n  SPARQL_STRINGLY = 'SPARQL_STRINGLY',\n  SPARQL_NON_LEXICAL = 'SPARQL_NON_LEXICAL',\n}\n\nexport enum TypeURL {\n  XSD_ANY_URI = 'http://www.w3.org/2001/XMLSchema#anyURI',\n  XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string',\n  RDF_LANG_STRING = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString',\n\n  XSD_BOOLEAN = 'http://www.w3.org/2001/XMLSchema#boolean',\n\n  XSD_DATE_TIME = 'http://www.w3.org/2001/XMLSchema#dateTime',\n  XSD_DATE_TIME_STAMP = 'http://www.w3.org/2001/XMLSchema#dateTimeStamp',\n  XSD_DATE = 'http://www.w3.org/2001/XMLSchema#date',\n\n  // Numeric types\n  XSD_DECIMAL = 'http://www.w3.org/2001/XMLSchema#decimal',\n  XSD_FLOAT = 'http://www.w3.org/2001/XMLSchema#float',\n  XSD_DOUBLE = 'http://www.w3.org/2001/XMLSchema#double',\n\n  // Derived numeric types\n  XSD_INTEGER = 'http://www.w3.org/2001/XMLSchema#integer',\n\n  XSD_NON_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonPositiveInteger',\n  XSD_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#negativeInteger',\n\n  XSD_LONG = 'http://www.w3.org/2001/XMLSchema#long',\n  XSD_INT = 'http://www.w3.org/2001/XMLSchema#int',\n  XSD_SHORT = 'http://www.w3.org/2001/XMLSchema#short',\n  XSD_BYTE = 'http://www.w3.org/2001/XMLSchema#byte',\n\n  XSD_NON_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonNegativeInteger',\n  XSD_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#positiveInteger',\n  XSD_UNSIGNED_LONG = 'http://www.w3.org/2001/XMLSchema#unsignedLong',\n  XSD_UNSIGNED_INT = 'http://www.w3.org/2001/XMLSchema#unsignedInt',\n  XSD_UNSIGNED_SHORT = 'http://www.w3.org/2001/XMLSchema#unsignedShort',\n  XSD_UNSIGNED_BYTE = 'http://www.w3.org/2001/XMLSchema#unsignedByte',\n\n  // Derived String Type\n  XSD_NORMALIZED_STRING = 'http://www.w3.org/2001/XMLSchema#normalizedString',\n  XSD_TOKEN = 'http://www.w3.org/2001/XMLSchema#token',\n  XSD_LANGUAGE = 'http://www.w3.org/2001/XMLSchema#language',\n  XSD_NM_TOKEN = 'http://www.w3.org/2001/XMLSchema#NMTOKEN',\n\n  XSD_NAME = 'http://www.w3.org/2001/XMLSchema#name',\n  XSD_NC_NAME = 'http://www.w3.org/2001/XMLSchema#NCName',\n  XSD_ENTITY = 'http://www.w3.org/2001/XMLSchema#ENTITY',\n  XSD_ID = 'http://www.w3.org/2001/XMLSchema#ID',\n  XSD_ID_REF = 'http://www.w3.org/2001/XMLSchema#IDREF',\n\n  // Other types\n  XSD_DURATION = 'http://www.w3.org/2001/XMLSchema#duration',\n  XSD_YEAR_MONTH_DURATION = 'http://www.w3.org/2001/XMLSchema#yearMonthDuration',\n  XSD_DAYTIME_DURATION = 'http://www.w3.org/2001/XMLSchema#dayTimeDuration',\n}\n\nexport type MainSparqlType =\n  'string'\n  | 'langString'\n  | 'dateTime'\n  | 'boolean'\n  | 'integer'\n  | 'decimal'\n  | 'float'\n  | 'double'\n  | 'other'\n  | 'nonlexical';\n\nexport type MainNumericSparqlType =\n  | 'integer'\n  | 'decimal'\n  | 'float'\n  | 'double';\n\n// ----------------------------------------------------------------------------\n// Operators\n// ----------------------------------------------------------------------------\n\nexport type Operator = RegularOperator | SpecialOperator;\n\n// TODO: Remove unneeded double typing\nexport enum RegularOperator {\n  // Operator mapping\n  // https://www.w3.org/TR/sparql11-query/#OperatorMapping\n  NOT = '!',\n  UMINUS = 'UMINUS',\n  UPLUS = 'UPLUS',\n  // LOGICAL_AND // See SpecialOperators\n  // LOGICAL_OR  // See SpecialOperators\n\n  EQUAL = '=',\n  NOT_EQUAL = '!=',\n  LT = '<',\n  GT = '>',\n  LTE = '<=',\n  GTE = '>=',\n\n  MULTIPLICATION = '*',\n  DIVISION = '/',\n  ADDITION = '+',\n  SUBTRACTION = '-',\n\n  // Functional Forms\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  // See SpecialOperators\n\n  // Functions on RDF Terms\n  // https://www.w3.org/TR/sparql11-query/#func-rdfTerms\n  IS_IRI = 'isiri',\n  IS_BLANK = 'isblank',\n  IS_LITERAL = 'isliteral',\n  IS_NUMERIC = 'isnumeric',\n  STR = 'str',\n  LANG = 'lang',\n  DATATYPE = 'datatype',\n  IRI = 'iri',\n  URI = 'uri',\n  // BNODE = 'BNODE', (see special operators)\n  STRDT = 'strdt',\n  STRLANG = 'strlang',\n  UUID = 'uuid',\n  STRUUID = 'struuid',\n\n  // Functions on strings\n  // https://www.w3.org/TR/sparql11-query/#func-strings\n  STRLEN = 'strlen',\n  SUBSTR = 'substr',\n  UCASE = 'ucase',\n  LCASE = 'lcase',\n  STRSTARTS = 'strstarts',\n  STRENDS = 'strends',\n  CONTAINS = 'contains',\n  STRBEFORE = 'strbefore',\n  STRAFTER = 'strafter',\n  ENCODE_FOR_URI = 'encode_for_uri',\n  // CONCAT = 'concat' (see special operators)\n  LANG_MATCHES = 'langmatches',\n  REGEX = 'regex',\n  REPLACE = 'replace',\n\n  // Functions on numerics\n  // https://www.w3.org/TR/sparql11-query/#func-numerics\n  ABS = 'abs',\n  ROUND = 'round',\n  CEIL = 'ceil',\n  FLOOR = 'floor',\n  RAND = 'rand',\n\n  // Functions on Dates and Times\n  // https://www.w3.org/TR/sparql11-query/#func-date-time\n  NOW = 'now',\n  YEAR = 'year',\n  MONTH = 'month',\n  DAY = 'day',\n  HOURS = 'hours',\n  MINUTES = 'minutes',\n  SECONDS = 'seconds',\n  TIMEZONE = 'timezone',\n  TZ = 'tz',\n\n  // Hash functions\n  // https://www.w3.org/TR/sparql11-query/#func-hash\n  MD5 = 'md5',\n  SHA1 = 'sha1',\n  SHA256 = 'sha256',\n  SHA384 = 'sha384',\n  SHA512 = 'sha512',\n\n  // XPath Constructor functions\n  // https://www.w3.org/TR/sparql11-query/#FunctionMapping\n  // See Named Operators\n}\n\nexport enum SpecialOperator {\n  // Functional Forms\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  BOUND = 'bound',\n  IF = 'if',\n  COALESCE = 'coalesce',\n  // EXISTENCE = 'existence',\n  LOGICAL_OR = '||',\n  LOGICAL_AND = '&&',\n  // EQUAL = '=', // See RegularOperators\n  SAME_TERM = 'sameterm',\n  IN = 'in',\n  NOT_IN = 'notin',\n\n  // Annoying functions - Has variable arity\n  CONCAT = 'concat',\n\n  // Context dependant functions\n  BNODE = 'BNODE',\n}\n\nexport const RegularOperators: Set<string> = new Set(Object.values(RegularOperator));\nexport const SpecialOperators: Set<string> = new Set(Object.values(SpecialOperator));\nexport const Operators = new Set([ ...RegularOperators, ...SpecialOperators ]);\n\nexport enum SetFunction {\n  COUNT = 'count',\n  SUM = 'sum',\n  MIN = 'min',\n  MAX = 'max',\n  AVG = 'avg',\n  GROUP_CONCAT = 'group_concat',\n  SAMPLE = 'sample',\n}\nexport const SetFunctions = new Set(Object.values(SetFunction));\n\nexport type NamedOperator =\n  // XPath Constructor functions\n  // https://www.w3.org/TR/sparql11-query/#FunctionMapping\n  TypeURL.XSD_STRING\n  | TypeURL.XSD_FLOAT\n  | TypeURL.XSD_DOUBLE\n  | TypeURL.XSD_DECIMAL\n  | TypeURL.XSD_INTEGER\n  | TypeURL.XSD_DATE_TIME\n  | TypeURL.XSD_DATE\n  | TypeURL.XSD_BOOLEAN;\n\nexport const NamedOperators = new Set([\n  TypeURL.XSD_STRING,\n  TypeURL.XSD_FLOAT,\n  TypeURL.XSD_DOUBLE,\n  TypeURL.XSD_DECIMAL,\n  TypeURL.XSD_INTEGER,\n  TypeURL.XSD_DATE_TIME,\n  TypeURL.XSD_DATE,\n  TypeURL.XSD_BOOLEAN,\n]);\n"]}
{"version":3,"file":"RegularFunctions.js","sourceRoot":"","sources":["../../../lib/functions/RegularFunctions.ts"],"names":[],"mappings":"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","sourcesContent":["import { BigNumber } from 'bignumber.js';\nimport { sha1, sha256, sha384, sha512 } from 'hash.js';\nimport { DataFactory } from 'rdf-data-factory';\nimport { resolve as resolveRelativeIri } from 'relative-to-absolute-iri';\nimport { hash as md5 } from 'spark-md5';\nimport * as uuid from 'uuid';\n\nimport type { ICompleteSharedContext } from '../evaluators/evaluatorHelpers/BaseExpressionEvaluator';\nimport * as E from '../expressions';\nimport { TermTransformer } from '../transformers/TermTransformer';\nimport * as C from '../util/Consts';\nimport { TypeAlias, TypeURL } from '../util/Consts';\nimport * as Err from '../util/Errors';\nimport * as P from '../util/Parsing';\nimport type { IOverloadedDefinition } from './Core';\nimport { bool, decimal, declare, double, integer, langString, string } from './Helpers';\nimport * as X from './XPathFunctions';\n\nconst DF = new DataFactory();\n\ntype Term = E.TermExpression;\n\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// Begin definitions\n\n// ----------------------------------------------------------------------------\n// Operator Mapping\n// https://www.w3.org/TR/sparql11-query/#OperatorMapping\n// ----------------------------------------------------------------------------\n\nconst not = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.NOT)\n    .onTerm1(() => val => bool(!val.coerceEBV()))\n    .collect(),\n};\n\nconst unaryPlus = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.UPLUS)\n    .numericConverter(() => val => val)\n    .collect(),\n};\n\nconst unaryMinus = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.UMINUS)\n    .numericConverter(() => val => -val)\n    .collect(),\n};\n\nconst multiplication = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.MULTIPLICATION)\n    .arithmetic(() => (left, right) => new BigNumber(left).times(right).toNumber())\n    .collect(),\n};\n\nconst division = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.DIVISION)\n    .arithmetic(() => (left, right) => new BigNumber(left).div(right).toNumber())\n    .onBinaryTyped(\n      [ TypeURL.XSD_INTEGER, TypeURL.XSD_INTEGER ],\n      () => (left: number, right: number) => {\n        if (right === 0) {\n          throw new Err.ExpressionError('Integer division by 0');\n        }\n        return decimal(new BigNumber(left).div(right).toNumber());\n      },\n    )\n    .collect(),\n};\n\nconst addition = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.ADDITION)\n    .arithmetic(() => (left, right) => new BigNumber(left).plus(right).toNumber())\n    .collect(),\n};\n\nconst subtraction = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.SUBTRACTION)\n    .arithmetic(() => (left, right) => new BigNumber(left).minus(right).toNumber())\n    .collect(),\n};\n\n// https://www.w3.org/TR/sparql11-query/#func-RDFterm-equal\nconst equality = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.EQUAL)\n    .numberTest(() => (left, right) => left === right)\n    .stringTest(() => (left, right) => left.localeCompare(right) === 0)\n    .booleanTest(() => (left, right) => left === right)\n    .dateTimeTest(() => (left, right) => left.getTime() === right.getTime())\n    .set(\n      [ 'term', 'term' ],\n      () => ([ left, right ]) => bool(RDFTermEqual(left, right)),\n    )\n    .collect(),\n};\n\nfunction RDFTermEqual(_left: Term, _right: Term): boolean {\n  const left = _left.toRDF();\n  const right = _right.toRDF();\n  const val = left.equals(right);\n  if ((left.termType === 'Literal') && (right.termType === 'Literal')) {\n    throw new Err.RDFEqualTypeError([ _left, _right ]);\n  }\n  return val;\n}\n\nconst inequality = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.NOT_EQUAL)\n    .numberTest(() => (left, right) => left !== right)\n    .stringTest(() => (left, right) => left.localeCompare(right) !== 0)\n    .booleanTest(() => (left, right) => left !== right)\n    .dateTimeTest(() => (left, right) => left.getTime() !== right.getTime())\n    .set(\n      [ 'term', 'term' ],\n      () => ([ left, right ]) => bool(!RDFTermEqual(left, right)),\n    )\n    .collect(),\n};\n\nconst lesserThan = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.LT)\n    .numberTest(() => (left, right) => left < right)\n    .stringTest(() => (left, right) => left.localeCompare(right) === -1)\n    .booleanTest(() => (left, right) => left < right)\n    .dateTimeTest(() => (left, right) => left.getTime() < right.getTime())\n    .collect(),\n};\n\nconst greaterThan = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.GT)\n    .numberTest(() => (left, right) => left > right)\n    .stringTest(() => (left, right) => left.localeCompare(right) === 1)\n    .booleanTest(() => (left, right) => left > right)\n    .dateTimeTest(() => (left, right) => left.getTime() > right.getTime())\n    .collect(),\n};\n\nconst lesserThanEqual = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.LTE)\n    .numberTest(() => (left, right) => left <= right)\n    .stringTest(() => (left, right) => left.localeCompare(right) !== 1)\n    .booleanTest(() => (left, right) => left <= right)\n    .dateTimeTest(() => (left, right) => left.getTime() <= right.getTime())\n    .collect(),\n};\n\nconst greaterThanEqual = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.GTE)\n    .numberTest(() => (left, right) => left >= right)\n    .stringTest(() => (left, right) => left.localeCompare(right) !== -1)\n    .booleanTest(() => (left, right) => left >= right)\n    .dateTimeTest(() => (left, right) => left.getTime() >= right.getTime())\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Functions on RDF Terms\n// https://www.w3.org/TR/sparql11-query/#func-rdfTerms\n// ----------------------------------------------------------------------------\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-isIRI\n */\nconst isIRI = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.IS_IRI)\n    .onTerm1(() => term => bool(term.termType === 'namedNode'))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-isBlank\n */\nconst isBlank = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.IS_BLANK)\n    .onTerm1(() => term => bool(term.termType === 'blankNode'))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-isLiteral\n */\nconst isLiteral = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.IS_LITERAL)\n    .onTerm1(() => term => bool(term.termType === 'literal'))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-isNumeric\n */\nconst isNumeric = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.IS_NUMERIC)\n    .onNumeric1(() => term => bool(true))\n    .onTerm1(() => term => bool(false))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-str\n */\nconst STR = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.STR)\n    .onTerm1(() => term => string(term.str()))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-lang\n */\nconst lang = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.LANG)\n    .onLiteral1(() => lit => string(lit.language || ''))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-datatype\n */\nconst datatype = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.DATATYPE)\n    .onLiteral1(() => lit => new E.NamedNode(lit.dataType))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-iri\n */\nconst IRI = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.IRI)\n    .set([ 'namedNode' ], context => args => {\n      const lit = <E.NamedNode> args[0];\n      const iri = resolveRelativeIri(lit.str(), context.baseIRI || '');\n      return new E.NamedNode(iri);\n    })\n    .onString1(context => lit => {\n      const iri = resolveRelativeIri(lit.str(), context.baseIRI || '');\n      return new E.NamedNode(iri);\n    })\n    .collect(),\n};\n\n// See special functions\n// const BNODE = {};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strdt\n */\nconst STRDT = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.STRDT).set(\n    [ TypeURL.XSD_STRING, 'namedNode' ],\n    ({ superTypeProvider, enableExtendedXsdTypes }) => ([ str, iri ]: [E.StringLiteral, E.NamedNode]) => {\n      const lit = DF.literal(str.typedValue, DF.namedNode(iri.value));\n      return new TermTransformer(superTypeProvider, enableExtendedXsdTypes).transformLiteral(lit);\n    },\n  ).collect(),\n};\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strlang\n */\nconst STRLANG = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.STRLANG)\n    .onBinaryTyped(\n      [ TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => (val: string, language: string) => new E.LangStringLiteral(val, language.toLowerCase()),\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-uuid\n */\nconst UUID = {\n  arity: 0,\n  overloads: declare(C.RegularOperator.UUID)\n    .set([], () => () => new E.NamedNode(`urn:uuid:${uuid.v4()}`))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-struuid\n */\nconst STRUUID = {\n  arity: 0,\n  overloads: declare(C.RegularOperator.STRUUID)\n    .set([], () => () => string(uuid.v4()))\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Functions on strings\n// https://www.w3.org/TR/sparql11-query/#func-forms\n// ----------------------------------------------------------------------------\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strlen\n */\nconst STRLEN = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.STRLEN)\n    .onStringly1(() => str => integer([ ...str.typedValue ].length))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-substr\n */\nconst SUBSTR = {\n  arity: [ 2, 3 ],\n  overloads: declare(C.RegularOperator.SUBSTR)\n    .onBinaryTyped(\n      [ TypeURL.XSD_STRING, TypeURL.XSD_INTEGER ],\n      () => (source: string, startingLoc: number) => string([ ...source ].slice(startingLoc - 1).join('')),\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_INTEGER ],\n      () => (source: E.LangStringLiteral, startingLoc: E.NumericLiteral) => {\n        const sub = [ ...source.typedValue ].slice(startingLoc.typedValue - 1).join('');\n        return langString(sub, source.language);\n      },\n    )\n    .onTernaryTyped([ TypeURL.XSD_STRING, TypeURL.XSD_INTEGER, TypeURL.XSD_INTEGER ],\n      () => (source: string, startingLoc: number, length: number) =>\n        string([ ...source ].slice(startingLoc - 1, length + startingLoc - 1).join('')))\n    .onTernary([ TypeURL.RDF_LANG_STRING, TypeURL.XSD_INTEGER, TypeURL.XSD_INTEGER ],\n      () => (source: E.LangStringLiteral, startingLoc: E.NumericLiteral, length: E.NumericLiteral) => {\n        const sub = [ ...source.typedValue ].slice(startingLoc.typedValue - 1,\n          length.typedValue + startingLoc.typedValue - 1).join('');\n        return langString(sub, source.language);\n      })\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-ucase\n */\nconst UCASE = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.UCASE)\n    .onString1Typed(() => lit => string(lit.toUpperCase()))\n    .onLangString1(() => lit => langString(lit.typedValue.toUpperCase(), lit.language))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-lcase\n */\nconst LCASE = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.LCASE)\n    .onString1Typed(() => lit => string(lit.toLowerCase()))\n    .onLangString1(() => lit => langString(lit.typedValue.toLowerCase(), lit.language))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strstarts\n * for this and the following functions you'll see (string, langstring) is not allowed. This behaviour is defined in:\n * https://www.w3.org/TR/sparql11-query/#func-arg-compatibility\n */\nconst STRSTARTS = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.STRSTARTS)\n    .onBinaryTyped(\n      [ TypeAlias.SPARQL_STRINGLY, TypeURL.XSD_STRING ],\n      () => (arg1: string, arg2: string) => bool(arg1.startsWith(arg2)),\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.RDF_LANG_STRING ],\n      () => (arg1: E.LangStringLiteral, arg2: E.LangStringLiteral) => {\n        if (arg1.language !== arg2.language) {\n          throw new Err.IncompatibleLanguageOperation(arg1, arg2);\n        }\n        return bool(arg1.typedValue.startsWith(arg2.typedValue));\n      },\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strends\n */\nconst STRENDS = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.STRENDS)\n    .onBinaryTyped(\n      [ TypeAlias.SPARQL_STRINGLY, TypeURL.XSD_STRING ],\n      () => (arg1: string, arg2: string) => bool(arg1.endsWith(arg2)),\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.RDF_LANG_STRING ],\n      () => (arg1: E.LangStringLiteral, arg2: E.LangStringLiteral) => {\n        if (arg1.language !== arg2.language) {\n          throw new Err.IncompatibleLanguageOperation(arg1, arg2);\n        }\n        return bool(arg1.typedValue.endsWith(arg2.typedValue));\n      },\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-contains\n */\nconst CONTAINS = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.CONTAINS)\n    .onBinaryTyped(\n      [ TypeAlias.SPARQL_STRINGLY, TypeURL.XSD_STRING ],\n      () => (arg1: string, arg2: string) => bool(arg1.includes(arg2)),\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.RDF_LANG_STRING ],\n      () => (arg1: E.LangStringLiteral, arg2: E.LangStringLiteral) => {\n        if (arg1.language !== arg2.language) {\n          throw new Err.IncompatibleLanguageOperation(arg1, arg2);\n        }\n        return bool(arg1.typedValue.includes(arg2.typedValue));\n      },\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strbefore\n */\nconst STRBEFORE = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.STRBEFORE)\n    .onBinaryTyped(\n      [ TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => (arg1: string, arg2: string) => string(arg1.slice(0, Math.max(0, arg1.indexOf(arg2)))),\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_STRING ],\n      () => (arg1: E.LangStringLiteral, arg2: E.StringLiteral) => {\n        const [ a1, a2 ] = [ arg1.typedValue, arg2.typedValue ];\n        const sub = arg1.typedValue.slice(0, Math.max(0, a1.indexOf(a2)));\n        return sub || !a2 ? langString(sub, arg1.language) : string(sub);\n      },\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.RDF_LANG_STRING ],\n      () => (arg1: E.LangStringLiteral, arg2: E.LangStringLiteral) => {\n        if (arg1.language !== arg2.language) {\n          throw new Err.IncompatibleLanguageOperation(arg1, arg2);\n        }\n        const [ a1, a2 ] = [ arg1.typedValue, arg2.typedValue ];\n        const sub = arg1.typedValue.slice(0, Math.max(0, a1.indexOf(a2)));\n        return sub || !a2 ? langString(sub, arg1.language) : string(sub);\n      },\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strafter\n */\nconst STRAFTER = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.STRAFTER)\n    .onBinaryTyped(\n      [ TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => (arg1: string, arg2: string) => string(arg1.slice(arg1.indexOf(arg2)).slice(arg2.length)),\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_STRING ],\n      () => (arg1: E.LangStringLiteral, arg2: E.StringLiteral) => {\n        const [ a1, a2 ] = [ arg1.typedValue, arg2.typedValue ];\n        const sub = a1.slice(a1.indexOf(a2)).slice(a2.length);\n        return sub || !a2 ? langString(sub, arg1.language) : string(sub);\n      },\n    )\n    .onBinary(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.RDF_LANG_STRING ],\n      () => (arg1: E.LangStringLiteral, arg2: E.LangStringLiteral) => {\n        if (arg1.language !== arg2.language) {\n          throw new Err.IncompatibleLanguageOperation(arg1, arg2);\n        }\n        const [ a1, a2 ] = [ arg1.typedValue, arg2.typedValue ];\n        const sub = a1.slice(a1.indexOf(a2)).slice(a2.length);\n        return sub || !a2 ? langString(sub, arg1.language) : string(sub);\n      },\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-encode\n */\nconst ENCODE_FOR_URI = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.ENCODE_FOR_URI)\n    .onStringly1Typed(() => val => string(encodeURI(val))).collect(),\n};\n\n// See special operators\n// const CONCAT = {}\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-langMatches\n */\nconst langmatches = {\n  arity: 2,\n  overloads: declare(C.RegularOperator.LANG_MATCHES)\n    .onBinaryTyped(\n      [ TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => (tag: string, range: string) => bool(X.langMatches(tag, range)),\n    ).collect(),\n};\n\nconst regex2: (context: ICompleteSharedContext) => (text: string, pattern: string) => E.BooleanLiteral =\n  () => (text: string, pattern: string) => bool(X.matches(text, pattern));\nconst regex3: (context: ICompleteSharedContext) => (text: string, pattern: string, flags: string) => E.BooleanLiteral =\n  () => (text: string, pattern: string, flags: string) => bool(X.matches(text, pattern, flags));\n/**\n * https://www.w3.org/TR/sparql11-query/#func-regex\n */\nconst REGEX = {\n  arity: [ 2, 3 ],\n  overloads: declare(C.RegularOperator.REGEX)\n    .onBinaryTyped([ TypeAlias.SPARQL_STRINGLY, TypeURL.XSD_STRING ], regex2)\n    .onTernaryTyped([ TypeAlias.SPARQL_STRINGLY, TypeURL.XSD_STRING, TypeURL.XSD_STRING ], regex3)\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-replace\n */\nconst REPLACE = {\n  arity: [ 3, 4 ],\n  overloads: declare(C.RegularOperator.REPLACE)\n    .onTernaryTyped(\n      [ TypeURL.XSD_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => (arg: string, pattern: string, replacement: string) =>\n        string(X.replace(arg, pattern, replacement)),\n    )\n    .set(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => ([ arg, pattern, replacement ]: [E.LangStringLiteral, E.StringLiteral, E.StringLiteral]) => {\n        const result = X.replace(arg.typedValue, pattern.typedValue, replacement.typedValue);\n        return langString(result, arg.language);\n      },\n    )\n    .onQuaternaryTyped(\n      [ TypeURL.XSD_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => (arg: string, pattern: string, replacement: string, flags: string) =>\n        string(X.replace(arg, pattern, replacement, flags)),\n    )\n    .set(\n      [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n      () => ([ arg, pattern, replacement, flags ]:\n      [E.LangStringLiteral, E.StringLiteral, E.StringLiteral, E.StringLiteral]) => {\n        const result = X.replace(arg.typedValue, pattern.typedValue, replacement.typedValue, flags.typedValue);\n        return langString(result, arg.language);\n      },\n    )\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Functions on numerics\n// https://www.w3.org/TR/sparql11-query/#func-numerics\n// ----------------------------------------------------------------------------\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-abs\n */\nconst abs = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.ABS)\n    .numericConverter(() => num => Math.abs(num))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-round\n */\nconst round = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.ROUND)\n    .numericConverter(() => num => Math.round(num))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-ceil\n */\nconst ceil = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.CEIL)\n    .numericConverter(() => num => Math.ceil(num))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-floor\n */\nconst floor = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.FLOOR)\n    .numericConverter(() => num => Math.floor(num))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#idp2130040\n */\nconst rand = {\n  arity: 0,\n  overloads: declare(C.RegularOperator.RAND)\n    .set([], () => () => double(Math.random()))\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Functions on Dates and Times\n// https://www.w3.org/TR/sparql11-query/#func-date-time\n// ----------------------------------------------------------------------------\n\nfunction parseDate(dateLit: E.DateTimeLiteral): P.ISplittedDate {\n  return P.parseXSDDateTime(dateLit.str());\n}\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-now\n */\nconst now = {\n  arity: 0,\n  overloads: declare(C.RegularOperator.NOW).set([], (sharedContext: ICompleteSharedContext) => () =>\n    new E.DateTimeLiteral(sharedContext.now, sharedContext.now.toISOString())).collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-year\n */\nconst year = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.YEAR)\n    .onDateTime1(\n      () => date => integer(Number(parseDate(date).year)),\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-month\n */\nconst month = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.MONTH)\n    .onDateTime1(\n      () => date => integer(Number(parseDate(date).month)),\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-day\n */\nconst day = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.DAY)\n    .onDateTime1(\n      () => date => integer(Number(parseDate(date).day)),\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-hours\n */\nconst hours = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.HOURS)\n    .onDateTime1(\n      () => date => integer(Number(parseDate(date).hours)),\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-minutes\n */\nconst minutes = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.MINUTES)\n    .onDateTime1(() => date => integer(Number(parseDate(date).minutes)))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-seconds\n */\nconst seconds = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.SECONDS)\n    .onDateTime1(() => date => decimal(Number(parseDate(date).seconds)))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-timezone\n */\nconst timezone = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.TIMEZONE)\n    .onDateTime1(\n      () => date => {\n        const duration = X.formatDayTimeDuration(parseDate(date).timezone);\n        if (!duration) {\n          throw new Err.InvalidTimezoneCall(date.strValue);\n        }\n        return new E.Literal(duration, TypeURL.XSD_DAYTIME_DURATION, duration);\n      },\n    )\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-tz\n */\nconst tz = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.TZ)\n    .onDateTime1(\n      () => date => string(parseDate(date).timezone),\n    )\n    .collect(),\n};\n\n// ----------------------------------------------------------------------------\n// Hash functions\n// https://www.w3.org/TR/sparql11-query/#func-hash\n// ----------------------------------------------------------------------------\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-md5\n */\nconst MD5 = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.MD5)\n    .onString1Typed(() => str => string(md5(str)))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-sha1\n */\nconst SHA1 = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.SHA1)\n    .onString1Typed(() => str => string(sha1().update(str).digest('hex')))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-sha256\n */\nconst SHA256 = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.SHA256)\n    .onString1Typed(() => str => string(sha256().update(str).digest('hex')))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-sha384\n */\nconst SHA384 = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.SHA384)\n    .onString1Typed(() => str => string(sha384().update(str).digest('hex')))\n    .collect(),\n};\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-sha512\n */\nconst SHA512 = {\n  arity: 1,\n  overloads: declare(C.RegularOperator.SHA512)\n    .onString1Typed(() => str => string(sha512().update(str).digest('hex')))\n    .collect(),\n};\n\n// End definitions.\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n\n/**\n * Collect all the definitions from above into an object\n */\nexport const definitions: Record<C.RegularOperator, IOverloadedDefinition> = {\n  // --------------------------------------------------------------------------\n  // Operator Mapping\n  // https://www.w3.org/TR/sparql11-query/#OperatorMapping\n  // --------------------------------------------------------------------------\n  '!': not,\n  UPLUS: unaryPlus,\n  UMINUS: unaryMinus,\n  '*': multiplication,\n  '/': division,\n  '+': addition,\n  '-': subtraction,\n  '=': equality,\n  '!=': inequality,\n  '<': lesserThan,\n  '>': greaterThan,\n  '<=': lesserThanEqual,\n  '>=': greaterThanEqual,\n\n  // --------------------------------------------------------------------------\n  // Functions on RDF Terms\n  // https://www.w3.org/TR/sparql11-query/#func-rdfTerms\n  // --------------------------------------------------------------------------\n  isiri: isIRI,\n  isblank: isBlank,\n  isliteral: isLiteral,\n  isnumeric: isNumeric,\n  str: STR,\n  lang,\n  datatype,\n  iri: IRI,\n  uri: IRI,\n  // 'BNODE': BNODE (see special operators),\n  strdt: STRDT,\n  strlang: STRLANG,\n  uuid: UUID,\n  struuid: STRUUID,\n\n  // --------------------------------------------------------------------------\n  // Functions on strings\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  // --------------------------------------------------------------------------\n  strlen: STRLEN,\n  substr: SUBSTR,\n  ucase: UCASE,\n  lcase: LCASE,\n  strstarts: STRSTARTS,\n  strends: STRENDS,\n  contains: CONTAINS,\n  strbefore: STRBEFORE,\n  strafter: STRAFTER,\n  encode_for_uri: ENCODE_FOR_URI,\n  // 'concat': CONCAT (see special operators)\n  langmatches,\n  regex: REGEX,\n  replace: REPLACE,\n\n  // --------------------------------------------------------------------------\n  // Functions on numerics\n  // https://www.w3.org/TR/sparql11-query/#func-numerics\n  // --------------------------------------------------------------------------\n  abs,\n  round,\n  ceil,\n  floor,\n  rand,\n\n  // --------------------------------------------------------------------------\n  // Functions on Dates and Times\n  // https://www.w3.org/TR/sparql11-query/#func-date-time\n  // --------------------------------------------------------------------------\n  now,\n  year,\n  month,\n  day,\n  hours,\n  minutes,\n  seconds,\n  timezone,\n  tz,\n\n  // --------------------------------------------------------------------------\n  // Hash functions\n  // https://www.w3.org/TR/sparql11-query/#func-hash\n  // --------------------------------------------------------------------------\n  md5: MD5,\n  sha1: SHA1,\n  sha256: SHA256,\n  sha384: SHA384,\n  sha512: SHA512,\n};\n"]}
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Average = void 0;
const E = require("../expressions");
const functions_1 = require("../functions");
const Helpers_1 = require("../functions/Helpers");
const C = require("../util/Consts");
const BaseAggregator_1 = require("./BaseAggregator");
class Average extends BaseAggregator_1.BaseAggregator {
    constructor() {
        super(...arguments);
        this.summer = functions_1.regularFunctions[C.RegularOperator.ADDITION];
        this.divider = functions_1.regularFunctions[C.RegularOperator.DIVISION];
    }
    static emptyValue() {
        return (0, Helpers_1.integer)(0).toRDF();
    }
    init(start) {
        const sum = this.termToNumericOrError(start);
        return { sum, count: 1 };
    }
    put(state, term) {
        const internalTerm = this.termToNumericOrError(term);
        const sum = this.summer.apply([state.sum, internalTerm], this.sharedContext);
        return {
            sum,
            count: state.count + 1,
        };
    }
    result(state) {
        const count = new E.IntegerLiteral(state.count);
        const result = this.divider.apply([state.sum, count], this.sharedContext);
        return result.toRDF();
    }
}
exports.Average = Average;
//# sourceMappingURL=Average.js.map
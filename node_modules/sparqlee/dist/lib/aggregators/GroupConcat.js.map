{"version":3,"file":"GroupConcat.js","sourceRoot":"","sources":["../../../lib/aggregators/GroupConcat.ts"],"names":[],"mappings":";;;AACA,kDAA8C;AAC9C,qDAAkD;AAElD,MAAa,WAAY,SAAQ,+BAAsB;IAC9C,MAAM,CAAC,UAAU;QACtB,OAAO,IAAA,gBAAM,EAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;IAC5B,CAAC;IAEM,IAAI,CAAC,KAAe;QACzB,OAAO,KAAK,CAAC,KAAK,CAAC;IACrB,CAAC;IAEM,GAAG,CAAC,KAAa,EAAE,IAAc;QACtC,OAAO,KAAK,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;IAC7C,CAAC;IAEM,MAAM,CAAC,KAAa;QACzB,OAAO,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;IAC/B,CAAC;CACF;AAhBD,kCAgBC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { string } from '../functions/Helpers';\nimport { BaseAggregator } from './BaseAggregator';\n\nexport class GroupConcat extends BaseAggregator<string> {\n  public static emptyValue(): RDF.Term {\n    return string('').toRDF();\n  }\n\n  public init(start: RDF.Term): string {\n    return start.value;\n  }\n\n  public put(state: string, term: RDF.Term): string {\n    return state + this.separator + term.value;\n  }\n\n  public result(state: string): RDF.Term {\n    return string(state).toRDF();\n  }\n}\n"]}
{"version":3,"file":"Average.js","sourceRoot":"","sources":["../../../lib/aggregators/Average.ts"],"names":[],"mappings":";;;AACA,oCAAoC;AACpC,4CAAgD;AAChD,kDAA+C;AAC/C,oCAAoC;AACpC,qDAAkD;AAOlD,MAAa,OAAQ,SAAQ,+BAA6B;IAA1D;;QACmB,WAAM,GAAG,4BAAgB,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QACtD,YAAO,GAAG,4BAAgB,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;IAyB1E,CAAC;IAvBQ,MAAM,CAAC,UAAU;QACtB,OAAO,IAAA,iBAAO,EAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;IAC5B,CAAC;IAEM,IAAI,CAAC,KAAe;QACzB,MAAM,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAC7C,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IAC3B,CAAC;IAEM,GAAG,CAAC,KAAoB,EAAE,IAAc;QAC7C,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QACrD,MAAM,GAAG,GAAsB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAE,KAAK,CAAC,GAAG,EAAE,YAAY,CAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAClG,OAAO;YACL,GAAG;YACH,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,CAAC;SACvB,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,KAAoB;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAChD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAE,KAAK,CAAC,GAAG,EAAE,KAAK,CAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC5E,OAAO,MAAM,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;CACF;AA3BD,0BA2BC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport * as E from '../expressions';\nimport { regularFunctions } from '../functions';\nimport { integer } from '../functions/Helpers';\nimport * as C from '../util/Consts';\nimport { BaseAggregator } from './BaseAggregator';\n\ninterface IAverageState {\n  sum: E.NumericLiteral;\n  count: number;\n}\n\nexport class Average extends BaseAggregator<IAverageState> {\n  private readonly summer = regularFunctions[C.RegularOperator.ADDITION];\n  private readonly divider = regularFunctions[C.RegularOperator.DIVISION];\n\n  public static emptyValue(): RDF.Term {\n    return integer(0).toRDF();\n  }\n\n  public init(start: RDF.Term): IAverageState {\n    const sum = this.termToNumericOrError(start);\n    return { sum, count: 1 };\n  }\n\n  public put(state: IAverageState, term: RDF.Term): IAverageState {\n    const internalTerm = this.termToNumericOrError(term);\n    const sum = <E.NumericLiteral> this.summer.apply([ state.sum, internalTerm ], this.sharedContext);\n    return {\n      sum,\n      count: state.count + 1,\n    };\n  }\n\n  public result(state: IAverageState): RDF.Term {\n    const count = new E.IntegerLiteral(state.count);\n    const result = this.divider.apply([ state.sum, count ], this.sharedContext);\n    return result.toRDF();\n  }\n}\n"]}
import type * as RDF from '@rdfjs/types';
import type { Algebra } from 'sparqlalgebrajs';
import type { ICompleteSharedContext } from '../evaluators/evaluatorHelpers/BaseExpressionEvaluator';
import type * as E from '../expressions';
import type { ITermTransformer } from '../transformers/TermTransformer';
export declare abstract class BaseAggregator<State> {
    protected sharedContext: ICompleteSharedContext;
    protected distinct: boolean;
    protected separator: string;
    protected termTransformer: ITermTransformer;
    constructor(expr: Algebra.AggregateExpression, sharedContext: ICompleteSharedContext);
    protected termToNumericOrError(term: RDF.Term): E.NumericLiteral;
    protected extractValue(term: RDF.Term): {
        value: any;
        type: string;
    };
    static emptyValue(): RDF.Term | undefined;
    abstract init(start: RDF.Term): State;
    abstract result(state: State): RDF.Term;
    abstract put(state: State, bindings: RDF.Term): State;
}

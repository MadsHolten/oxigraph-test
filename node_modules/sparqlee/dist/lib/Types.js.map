{"version":3,"file":"Types.js","sourceRoot":"","sources":["../../lib/Types.ts"],"names":[],"mappings":";;AAMA,wBAAwB;AACxB,+BAA+B;AAC/B,+BAA+B;AAC/B,+BAA+B;AAC/B,KAAK;AAEL,oBAAoB;AACpB,sFAAsF;AACtF,0FAA0F;AAC1F,4GAA4G","sourcesContent":["import type * as RDF from '@rdfjs/types';\n\nexport interface IExpressionEvaluator<ExpressionType, TermType> {\n  evaluate: (expr: ExpressionType, mapping: RDF.Bindings) => TermType;\n}\n\n// Export type Hooks = {\n//   existence?: ExistenceHook;\n//   aggregate?: AggregateHook;\n//   namedFunc?: NamedFuncHook;\n// };\n\n// // TODO: Document\n// export type NamedFuncHook = (expression: Alg.NamedExpression) => Promise<RDF.Term>;\n// export type AggregateHook = (expression: Alg.AggregateExpression) => Promise<RDF.Term>;\n// export type ExistenceHook = (expression: Alg.ExistenceExpression, mapping: Bindings) => Promise<boolean>;\n"]}
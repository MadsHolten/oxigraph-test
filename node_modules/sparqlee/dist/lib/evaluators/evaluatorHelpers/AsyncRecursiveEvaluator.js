"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncRecursiveEvaluator = void 0;
const E = require("../../expressions");
const TermTransformer_1 = require("../../transformers/TermTransformer");
const Err = require("../../util/Errors");
const BaseExpressionEvaluator_1 = require("./BaseExpressionEvaluator");
class AsyncRecursiveEvaluator extends BaseExpressionEvaluator_1.BaseExpressionEvaluator {
    constructor(context, termTransformer) {
        super(termTransformer || new TermTransformer_1.TermTransformer(context.superTypeProvider, context.enableExtendedXsdTypes));
        this.context = context;
        this.subEvaluators = {
            // Shared
            [E.ExpressionType.Term]: this.term.bind(this),
            [E.ExpressionType.Variable]: this.variable.bind(this),
            // Async
            [E.ExpressionType.Operator]: this.evalOperator.bind(this),
            [E.ExpressionType.SpecialOperator]: this.evalSpecialOperator.bind(this),
            [E.ExpressionType.Named]: this.evalNamed.bind(this),
            [E.ExpressionType.Existence]: this.evalExistence.bind(this),
            [E.ExpressionType.Aggregate]: this.evalAggregate.bind(this),
            [E.ExpressionType.AsyncExtension]: this.evalAsyncExtension.bind(this),
        };
    }
    async evaluate(expr, mapping) {
        const evaluator = this.subEvaluators[expr.expressionType];
        if (!evaluator) {
            throw new Err.InvalidExpressionType(expr);
        }
        return evaluator.bind(this)(expr, mapping);
    }
    async evalOperator(expr, mapping) {
        const argPromises = expr.args.map(arg => this.evaluate(arg, mapping));
        const argResults = await Promise.all(argPromises);
        return expr.apply(argResults);
    }
    async evalSpecialOperator(expr, mapping) {
        const evaluate = this.evaluate.bind(this);
        const context = {
            args: expr.args,
            mapping,
            superTypeProvider: this.context.superTypeProvider,
            now: this.context.now,
            baseIRI: this.context.baseIRI,
            overloadCache: this.context.overloadCache,
            evaluate,
            bnode: this.context.bnode,
            enableExtendedXsdTypes: this.context.enableExtendedXsdTypes,
        };
        return expr.applyAsync(context);
    }
    async _evalAsyncArgs(args, mapping) {
        const argPromises = args.map(arg => this.evaluate(arg, mapping));
        return await Promise.all(argPromises);
    }
    async evalNamed(expr, mapping) {
        return expr.apply(await this._evalAsyncArgs(expr.args, mapping));
    }
    async evalAsyncExtension(expr, mapping) {
        return await expr.apply(await this._evalAsyncArgs(expr.args, mapping));
    }
    async evalExistence(expr, mapping) {
        if (!this.context.exists) {
            throw new Err.NoExistenceHook();
        }
        return new E.BooleanLiteral(await this.context.exists(expr.expression, mapping));
    }
    // TODO: Remove?
    async evalAggregate(expr, _mapping) {
        if (!this.context.aggregate) {
            throw new Err.NoExistenceHook();
        }
        return this.termTransformer.transformRDFTermUnsafe(await this.context.aggregate(expr.expression));
    }
}
exports.AsyncRecursiveEvaluator = AsyncRecursiveEvaluator;
//# sourceMappingURL=AsyncRecursiveEvaluator.js.map
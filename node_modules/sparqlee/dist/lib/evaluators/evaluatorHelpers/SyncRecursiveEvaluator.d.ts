import type * as RDF from '@rdfjs/types';
import type { Algebra as Alg } from 'sparqlalgebrajs';
import * as E from '../../expressions';
import type { ITermTransformer } from '../../transformers/TermTransformer';
import type { IExpressionEvaluator } from '../../Types';
import type { ISuperTypeProvider } from '../../util/TypeHandling';
import type { SyncExtensionFunctionCreator } from '../SyncEvaluator';
import type { ICompleteSharedContext } from './BaseExpressionEvaluator';
import { BaseExpressionEvaluator } from './BaseExpressionEvaluator';
export interface ICompleteSyncEvaluatorContext extends ICompleteSharedContext {
    exists?: (expression: Alg.ExistenceExpression, mapping: RDF.Bindings) => boolean;
    aggregate?: (expression: Alg.AggregateExpression) => RDF.Term;
    bnode?: (input?: string) => RDF.BlankNode;
    extensionFunctionCreator?: SyncExtensionFunctionCreator;
}
export declare class SyncRecursiveEvaluator extends BaseExpressionEvaluator implements IExpressionEvaluator<E.Expression, E.Term> {
    private readonly context;
    protected openWorldType: ISuperTypeProvider;
    private readonly subEvaluators;
    constructor(context: ICompleteSyncEvaluatorContext, termTransformer?: ITermTransformer);
    evaluate(expr: E.Expression, mapping: RDF.Bindings): E.Term;
    private evalOperator;
    private evalSpecialOperator;
    private evalNamed;
    private evalSyncExtension;
    private evalExistence;
    private evalAggregate;
}

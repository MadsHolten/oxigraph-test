"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncRecursiveEvaluator = void 0;
const E = require("../../expressions");
const TermTransformer_1 = require("../../transformers/TermTransformer");
const Err = require("../../util/Errors");
const BaseExpressionEvaluator_1 = require("./BaseExpressionEvaluator");
class SyncRecursiveEvaluator extends BaseExpressionEvaluator_1.BaseExpressionEvaluator {
    constructor(context, termTransformer) {
        super(termTransformer || new TermTransformer_1.TermTransformer(context.superTypeProvider, context.enableExtendedXsdTypes));
        this.context = context;
        this.subEvaluators = {
            // Shared
            [E.ExpressionType.Term]: this.term.bind(this),
            [E.ExpressionType.Variable]: this.variable.bind(this),
            // Sync
            [E.ExpressionType.Operator]: this.evalOperator.bind(this),
            [E.ExpressionType.SpecialOperator]: this.evalSpecialOperator.bind(this),
            [E.ExpressionType.Named]: this.evalNamed.bind(this),
            [E.ExpressionType.Existence]: this.evalExistence.bind(this),
            [E.ExpressionType.Aggregate]: this.evalAggregate.bind(this),
            [E.ExpressionType.SyncExtension]: this.evalSyncExtension.bind(this),
        };
    }
    evaluate(expr, mapping) {
        const evaluator = this.subEvaluators[expr.expressionType];
        if (!evaluator) {
            throw new Err.InvalidExpressionType(expr);
        }
        return evaluator.bind(this)(expr, mapping);
    }
    evalOperator(expr, mapping) {
        const args = expr.args.map(arg => this.evaluate(arg, mapping));
        return expr.apply(args);
    }
    evalSpecialOperator(expr, mapping) {
        const evaluate = this.evaluate.bind(this);
        const context = {
            args: expr.args,
            mapping,
            superTypeProvider: this.context.superTypeProvider,
            now: this.context.now,
            baseIRI: this.context.baseIRI,
            overloadCache: this.context.overloadCache,
            evaluate,
            bnode: this.context.bnode,
            enableExtendedXsdTypes: this.context.enableExtendedXsdTypes,
        };
        return expr.applySync(context);
    }
    evalNamed(expr, mapping) {
        const args = expr.args.map(arg => this.evaluate(arg, mapping));
        return expr.apply(args);
    }
    evalSyncExtension(expr, mapping) {
        const args = expr.args.map(arg => this.evaluate(arg, mapping));
        return expr.apply(args);
    }
    evalExistence(expr, mapping) {
        if (!this.context.exists) {
            throw new Err.NoExistenceHook();
        }
        return new E.BooleanLiteral(this.context.exists(expr.expression, mapping));
    }
    evalAggregate(expr, mapping) {
        if (!this.context.aggregate) {
            throw new Err.NoAggregator();
        }
        return this.termTransformer.transformRDFTermUnsafe(this.context.aggregate(expr.expression));
    }
}
exports.SyncRecursiveEvaluator = SyncRecursiveEvaluator;
//# sourceMappingURL=SyncRecursiveEvaluator.js.map
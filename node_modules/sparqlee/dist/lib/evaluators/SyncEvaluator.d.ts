import type * as RDF from '@rdfjs/types';
import type { Algebra as Alg } from 'sparqlalgebrajs';
import type * as E from '../expressions/Expressions';
import type { ISharedContext } from './evaluatorHelpers/BaseExpressionEvaluator';
import type { ICompleteSyncEvaluatorContext } from './evaluatorHelpers/SyncRecursiveEvaluator';
export interface ISyncEvaluatorContext extends ISharedContext {
    exists?: (expression: Alg.ExistenceExpression, mapping: RDF.Bindings) => boolean;
    aggregate?: (expression: Alg.AggregateExpression) => RDF.Term;
    bnode?: (input?: string) => RDF.BlankNode;
    extensionFunctionCreator?: SyncExtensionFunctionCreator;
}
export declare type SyncExtensionFunction = (args: RDF.Term[]) => RDF.Term;
export declare type SyncExtensionFunctionCreator = (functionNamedNode: RDF.NamedNode) => SyncExtensionFunction | undefined;
export declare class SyncEvaluator {
    algExpr: Alg.Expression;
    context: ISyncEvaluatorContext;
    private readonly expr;
    private readonly evaluator;
    static completeContext(context: ISyncEvaluatorContext): ICompleteSyncEvaluatorContext;
    constructor(algExpr: Alg.Expression, context?: ISyncEvaluatorContext);
    evaluate(mapping: RDF.Bindings): RDF.Term;
    evaluateAsEBV(mapping: RDF.Bindings): boolean;
    evaluateAsInternal(mapping: RDF.Bindings): E.TermExpression;
}

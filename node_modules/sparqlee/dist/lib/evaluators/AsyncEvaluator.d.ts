import type * as RDF from '@rdfjs/types';
import type { Algebra as Alg } from 'sparqlalgebrajs';
import type * as E from '../expressions/Expressions';
import type { ICompleteAsyncEvaluatorContext } from './evaluatorHelpers/AsyncRecursiveEvaluator';
import type { ISharedContext } from './evaluatorHelpers/BaseExpressionEvaluator';
export declare type AsyncExtensionFunction = (args: RDF.Term[]) => Promise<RDF.Term>;
export declare type AsyncExtensionFunctionCreator = (functionNamedNode: RDF.NamedNode) => AsyncExtensionFunction | undefined;
export interface IAsyncEvaluatorContext extends ISharedContext {
    exists?: (expression: Alg.ExistenceExpression, mapping: RDF.Bindings) => Promise<boolean>;
    aggregate?: (expression: Alg.AggregateExpression) => Promise<RDF.Term>;
    bnode?: (input?: string) => Promise<RDF.BlankNode>;
    extensionFunctionCreator?: AsyncExtensionFunctionCreator;
}
export declare class AsyncEvaluator {
    algExpr: Alg.Expression;
    private readonly expr;
    private readonly evaluator;
    static completeContext(context: IAsyncEvaluatorContext): ICompleteAsyncEvaluatorContext;
    constructor(algExpr: Alg.Expression, context?: IAsyncEvaluatorContext);
    evaluate(mapping: RDF.Bindings): Promise<RDF.Term>;
    evaluateAsEBV(mapping: RDF.Bindings): Promise<boolean>;
    evaluateAsInternal(mapping: RDF.Bindings): Promise<E.TermExpression>;
}

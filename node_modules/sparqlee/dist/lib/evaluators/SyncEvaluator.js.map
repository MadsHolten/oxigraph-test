{"version":3,"file":"SyncEvaluator.js","sourceRoot":"","sources":["../../../lib/evaluators/SyncEvaluator.ts"],"names":[],"mappings":";;;AACA,sCAAsC;AAGtC,2EAAwE;AAIxE,sFAAmF;AAYnF,MAAa,aAAa;IAqBxB,YAA0B,OAAuB,EAAS,UAAiC,EAAE;QAAnE,YAAO,GAAP,OAAO,CAAgB;QAAS,YAAO,GAAP,OAAO,CAA4B;QAC3F,wDAAwD;QACxD,MAAM,OAAO,GAAG,OAAO,CAAC,wBAAwB,IAAI,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;QACtE,MAAM,WAAW,GAAG,aAAa,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAE3D,MAAM,WAAW,GAAG,IAAI,uCAAkB,iBACxC,IAAI,EAAE,MAAM,EACZ,OAAO,IACJ,WAAW,EACd,CAAC;QACH,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAElD,IAAI,CAAC,SAAS,GAAG,IAAI,+CAAsB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IACxE,CAAC;IA9BM,MAAM,CAAC,eAAe,CAAC,OAA8B;QAC1D,OAAO;YACL,GAAG,EAAE,OAAO,CAAC,GAAG,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;YACxC,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,SAAS;YACrC,aAAa,EAAE,OAAO,CAAC,aAAa,IAAI,IAAI,QAAQ,EAAE;YACtD,iBAAiB,EAAE;gBACjB,KAAK,EAAE,OAAO,CAAC,SAAS,IAAI,IAAI,QAAQ,EAAE;gBAC1C,UAAU,EAAE,OAAO,CAAC,YAAY,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC;aACnD;YACD,wBAAwB,EAAE,OAAO,CAAC,wBAAwB;YAC1D,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,sBAAsB,EAAE,OAAO,CAAC,sBAAsB,IAAI,KAAK;SAChE,CAAC;IACJ,CAAC;IAiBM,QAAQ,CAAC,OAAqB;QACnC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3D,OAAO,MAAM,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAEM,aAAa,CAAC,OAAqB;QACxC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3D,OAAO,MAAM,CAAC,SAAS,EAAE,CAAC;IAC5B,CAAC;IAEM,kBAAkB,CAAC,OAAqB;QAC7C,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3D,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAlDD,sCAkDC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport * as LRUCache from 'lru-cache';\nimport type { Algebra as Alg } from 'sparqlalgebrajs';\nimport type * as E from '../expressions/Expressions';\nimport { AlgebraTransformer } from '../transformers/AlgebraTransformer';\nimport type { IExpressionEvaluator } from '../Types';\nimport type { ISharedContext } from './evaluatorHelpers/BaseExpressionEvaluator';\nimport type { ICompleteSyncEvaluatorContext } from './evaluatorHelpers/SyncRecursiveEvaluator';\nimport { SyncRecursiveEvaluator } from './evaluatorHelpers/SyncRecursiveEvaluator';\n\nexport interface ISyncEvaluatorContext extends ISharedContext {\n  exists?: (expression: Alg.ExistenceExpression, mapping: RDF.Bindings) => boolean;\n  aggregate?: (expression: Alg.AggregateExpression) => RDF.Term;\n  bnode?: (input?: string) => RDF.BlankNode;\n  extensionFunctionCreator?: SyncExtensionFunctionCreator;\n}\n\nexport type SyncExtensionFunction = (args: RDF.Term[]) => RDF.Term;\nexport type SyncExtensionFunctionCreator = (functionNamedNode: RDF.NamedNode) => SyncExtensionFunction | undefined;\n\nexport class SyncEvaluator {\n  private readonly expr: E.Expression;\n  private readonly evaluator: IExpressionEvaluator<E.Expression, E.TermExpression>;\n\n  public static completeContext(context: ISyncEvaluatorContext): ICompleteSyncEvaluatorContext {\n    return {\n      now: context.now || new Date(Date.now()),\n      baseIRI: context.baseIRI || undefined,\n      overloadCache: context.overloadCache || new LRUCache(),\n      superTypeProvider: {\n        cache: context.typeCache || new LRUCache(),\n        discoverer: context.getSuperType || (() => 'term'),\n      },\n      extensionFunctionCreator: context.extensionFunctionCreator,\n      exists: context.exists,\n      aggregate: context.aggregate,\n      bnode: context.bnode,\n      enableExtendedXsdTypes: context.enableExtendedXsdTypes || false,\n    };\n  }\n\n  public constructor(public algExpr: Alg.Expression, public context: ISyncEvaluatorContext = {}) {\n    // eslint-disable-next-line unicorn/no-useless-undefined\n    const creator = context.extensionFunctionCreator || (() => undefined);\n    const baseContext = SyncEvaluator.completeContext(context);\n\n    const transformer = new AlgebraTransformer({\n      type: 'sync',\n      creator,\n      ...baseContext,\n    });\n    this.expr = transformer.transformAlgebra(algExpr);\n\n    this.evaluator = new SyncRecursiveEvaluator(baseContext, transformer);\n  }\n\n  public evaluate(mapping: RDF.Bindings): RDF.Term {\n    const result = this.evaluator.evaluate(this.expr, mapping);\n    return result.toRDF();\n  }\n\n  public evaluateAsEBV(mapping: RDF.Bindings): boolean {\n    const result = this.evaluator.evaluate(this.expr, mapping);\n    return result.coerceEBV();\n  }\n\n  public evaluateAsInternal(mapping: RDF.Bindings): E.TermExpression {\n    const result = this.evaluator.evaluate(this.expr, mapping);\n    return result;\n  }\n}\n"]}
{"version":3,"file":"sparqlee.js","sourceRoot":"","sources":["../../bin/sparqlee.ts"],"names":[],"mappings":";;;AAEA,iEAA6D;AAE7D,qDAA4C;AAC5C,mEAAgE;AAEhE,MAAM,KAAK,GAAG;;;CAGb,CAAC;AAEF,SAAS,QAAQ,CAAC,IAAY;IAC5B,OAAO;;;;;;oCAM2B,IAAI;CACvC,CAAC;AACF,CAAC;AAED,SAAS,KAAK,CAAC,KAAa;IAC1B,MAAM,WAAW,GAAG,IAAA,2BAAS,EAAC,KAAK,CAAC,CAAC;IACrC,gDAAgD;IAChD,OAAO,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC;AACtC,CAAC;AAED,KAAK,UAAU,IAAI;IACjB,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3B,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,OAAO;KACR;IAED,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9B,MAAM,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAE1C,MAAM,SAAS,GAAG,IAAI,6BAAa,CAAC,UAAU,CAAC,CAAC;IAEhD,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI,kCAAe,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;IAEpE,sCAAsC;IACtC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACtB,CAAC;AAED,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;IACnB,sCAAsC;IACtC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC","sourcesContent":["#! /usr/bin/env node\n\nimport { BindingsFactory } from '@comunica/bindings-factory';\nimport type { Algebra as Alg } from 'sparqlalgebrajs';\nimport { translate } from 'sparqlalgebrajs';\nimport { SyncEvaluator } from '../lib/evaluators/SyncEvaluator';\n\nconst USAGE = `\nUsage: sparqlee <expression>\nExample: sparqlee 'concat(\"foo\", \"bar\")'\n`;\n\nfunction template(expr: string): string {\n  return `\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX fn: <https://www.w3.org/TR/xpath-functions#>\nPREFIX err: <http://www.w3.org/2005/xqt-errors#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT * WHERE { ?s ?p ?o FILTER (${expr})}\n`;\n}\n\nfunction parse(query: string): Alg.Expression {\n  const sparqlQuery = translate(query);\n  // Extract filter expression from complete query\n  return sparqlQuery.input.expression;\n}\n\nasync function main(): Promise<void> {\n  if (process.argv.length < 3) {\n    // eslint-disable-next-line no-console\n    console.log(USAGE);\n    return;\n  }\n\n  const input = process.argv[2];\n  const expression = parse(template(input));\n\n  const evaluator = new SyncEvaluator(expression);\n\n  const result = evaluator.evaluate(new BindingsFactory().bindings());\n\n  // eslint-disable-next-line no-console\n  console.log(result);\n}\n\nmain().catch(error => {\n  // eslint-disable-next-line no-console\n  console.log(error);\n});\n"]}
import type * as RDF from '@rdfjs/types';
import type { JsonLdContextNormalized, JsonLdContext } from 'jsonld-context-parser';
import { Resource } from './Resource';
/**
 * Take a stream or array of RDF quads and loads them as linked resources.
 */
export declare class RdfObjectLoader {
    private readonly dataFactory;
    readonly normalizeLists: boolean;
    readonly context: Promise<void>;
    readonly resources: Record<string, Resource>;
    contextResolved: JsonLdContextNormalized;
    private contextError;
    constructor(args?: IRdfClassLoaderArgs);
    /**
     * Get the resource object for the given term.
     * If it does not exist, one will be created.
     * @param {Term} term An RDF term.
     * @return {Resource} A resource.
     */
    getOrMakeResource(term: RDF.Term): Resource;
    /**
     * Create a resource for the given hash,
     * where all fields in the given hash are considered to be compacted properties that will be appended.
     *
     * Special field cases:
     * * '@id' represents the IRI identifier.
     * * 'list' is considered an RDF list.
     *
     * Values can be nested hashes, for which other Resources will be created.
     * String values will be converted into term sources following the semantics of rdf-string.js.
     * Values can also be Resources.
     *
     * @param hash A hash containing compacted properties.
     */
    createCompactedResource(hash: any): Resource;
    /**
     * Create resources for the given hash or array by delegating array entries to {@link createCompactedResource}.
     * @param hashOrArray A hash or array of hashes containing compacted properties.
     */
    createCompactedResources(hashOrArray: any): Resource[];
    /**
     * Import the given stream of RDF quads.
     * Resources will be created and linked for all passed terms.
     * @param {Stream} stream A stream of RDF quads.
     * @return {Promise<void>} A promise that resolves when the stream has ended.
     * @template Q The type of quad, defaults to RDF.Quad.
     */
    import<Q extends RDF.BaseQuad = RDF.Quad>(stream: RDF.Stream<Q>): Promise<void>;
    /**
     * Import the given array of RDF quads.
     * Resources will be created and linked for all passed terms.
     * @param {Q[]} quads An array of RDF quads.
     * @return {Promise<void>} A promise that resolves when the array has been fully imported.
     * @template Q The type of quad, defaults to RDF.Quad.
     */
    importArray<Q extends RDF.BaseQuad = RDF.Quad>(quads: Q[]): Promise<void>;
}
export interface IRdfClassLoaderArgs {
    /**
     * If RDF lists should be loaded into the Resource.list field.
     * Defaults to true.
     */
    normalizeLists?: boolean;
    /**
     * The JSON-LD context to use for expanding and compacting.
     */
    context?: JsonLdContext;
    /**
     * The factory to create RDF terms and quads with.
     */
    dataFactory?: RDF.DataFactory;
}

import type * as RDF from '@rdfjs/types';
/**
 * A helper class for converting RDF lists to JavaScript RDF term term lists
 */
export declare class RdfListMaterializer {
    static readonly RDF_FIRST: RDF.NamedNode;
    static readonly RDF_REST: RDF.NamedNode;
    static readonly RDF_NIL: RDF.NamedNode;
    private readonly chains;
    protected static addChain(chains: Record<string, {
        first: RDF.Term;
        rest: RDF.Term;
    }>, subject: RDF.Term, object: RDF.Term, type: 'first' | 'rest'): void;
    protected static materializeChain(root: RDF.Term, chains: Record<string, {
        first: RDF.Term;
        rest: RDF.Term;
    }>, array?: RDF.Term[]): RDF.Term[] | undefined;
    /**
     * Import the given RDF stream.
     * @param {Stream} stream An RDF stream.
     * @return {Promise<void>} A promise that resolves once the stream has ended.
     * @template Q The type of quad, defaults to RDF.Quad.
     */
    import<Q extends RDF.BaseQuad = RDF.Quad>(stream: RDF.Stream<Q>): Promise<void>;
    /**
     * Get the list identified by the given starting term.
     * @param {Term} root A root RDF term that identifies an RDF list.
     * @return {Term[]} A list of terms, or undefined if the given root is not a list.
     */
    getList(root: RDF.Term): RDF.Term[] | undefined;
    /**
     * @return {Term[]} All available list roots.
     */
    getRoots(): RDF.Term[];
}
